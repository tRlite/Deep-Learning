{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"colab":{"provenance":[{"file_id":"1PO5ffKlghuzdzQwXMm1PpLP1J2bVX9n1","timestamp":1665587279375}],"collapsed_sections":[]},"widgets":{"application/vnd.jupyter.widget-state+json":{"5f6806a5af5344be912872a6dbaffb6b":{"model_module":"catboost-widget","model_name":"CatboostWidgetModel","model_module_version":"^1.0.0","state":{"_dom_classes":[],"_model_module":"catboost-widget","_model_module_version":"^1.0.0","_model_name":"CatboostWidgetModel","_view_count":null,"_view_module":"catboost-widget","_view_module_version":"^1.0.0","_view_name":"CatboostWidgetView","data":{"catboost_info":{"path":"catboost_info","name":"catboost_info","content":{"passed_iterations":19,"total_iterations":20,"data":{"iterations":[{"parameters":[{"l2_leaf_reg":0}],"learn":[0.3357069654],"iteration":0,"passed_time":4.124300428,"remaining_time":78.36170814,"test":[0.8433103844,0.4154363614]},{"parameters":[{"l2_leaf_reg":0.05263157895}],"learn":[0.3472045478],"iteration":1,"passed_time":8.331816717,"remaining_time":74.98635046,"test":[0.843605852,0.4141266408]},{"parameters":[{"l2_leaf_reg":0.1052631579}],"learn":[0.3524620833],"iteration":2,"passed_time":12.67091063,"remaining_time":71.80182688,"test":[0.8441738382,0.413281252]},{"parameters":[{"l2_leaf_reg":0.1578947368}],"learn":[0.3489526521],"iteration":3,"passed_time":18.54508555,"remaining_time":74.1803422,"test":[0.8451635112,0.4133395273]},{"parameters":[{"l2_leaf_reg":0.2105263158}],"learn":[0.3562680259],"iteration":4,"passed_time":22.90092664,"remaining_time":68.70277991,"test":[0.8462048193,0.411313425]},{"parameters":[{"l2_leaf_reg":0.2631578947}],"learn":[0.3561162555],"iteration":5,"passed_time":27.0731987,"remaining_time":63.17079696,"test":[0.8433706254,0.4140239549]},{"parameters":[{"l2_leaf_reg":0.3157894737}],"learn":[0.3548620182],"iteration":6,"passed_time":31.28591105,"remaining_time":58.10240623,"test":[0.8443516925,0.4137573447]},{"parameters":[{"l2_leaf_reg":0.3684210526}],"learn":[0.3537108707],"iteration":7,"passed_time":36.90228626,"remaining_time":55.35342939,"test":[0.8432415376,0.4145506071]},{"parameters":[{"l2_leaf_reg":0.4210526316}],"learn":[0.3568732759],"iteration":8,"passed_time":43.83415075,"remaining_time":53.57507313,"test":[0.8445094664,0.4131899419]},{"parameters":[{"l2_leaf_reg":0.4736842105}],"learn":[0.3572751851],"iteration":9,"passed_time":50.62847151,"remaining_time":50.62847151,"test":[0.843643144,0.4139728138]},{"parameters":[{"l2_leaf_reg":0.5263157895}],"learn":[0.3568660775],"iteration":10,"passed_time":57.18737712,"remaining_time":46.78967219,"test":[0.8445410212,0.4134100235]},{"parameters":[{"l2_leaf_reg":0.5789473684}],"learn":[0.3601608548],"iteration":11,"passed_time":61.46851838,"remaining_time":40.97901225,"test":[0.8460212278,0.4118858675]},{"parameters":[{"l2_leaf_reg":0.6315789474}],"learn":[0.3615556653],"iteration":12,"passed_time":65.78013046,"remaining_time":35.42007025,"test":[0.8441250717,0.4141329629]},{"parameters":[{"l2_leaf_reg":0.6842105263}],"learn":[0.359232904],"iteration":13,"passed_time":70.7526189,"remaining_time":30.32255096,"test":[0.8445897877,0.4129403316]},{"parameters":[{"l2_leaf_reg":0.7368421053}],"learn":[0.3593679592],"iteration":14,"passed_time":75.0313876,"remaining_time":25.01046253,"test":[0.8455393001,0.4122485718]},{"parameters":[{"l2_leaf_reg":0.7894736842}],"learn":[0.3599983406],"iteration":15,"passed_time":80.03089918,"remaining_time":20.00772479,"test":[0.8447446931,0.4127720362]},{"parameters":[{"l2_leaf_reg":0.8421052632}],"learn":[0.3595179468],"iteration":16,"passed_time":85.40086293,"remaining_time":15.07074052,"test":[0.8438611589,0.4137379586]},{"parameters":[{"l2_leaf_reg":0.8947368421}],"learn":[0.3617509634],"iteration":17,"passed_time":91.61849019,"remaining_time":10.17983224,"test":[0.8426907631,0.4148220243]},{"parameters":[{"l2_leaf_reg":0.9473684211}],"learn":[0.3600711858],"iteration":18,"passed_time":96.61322557,"remaining_time":5.084906609,"test":[0.8439959839,0.4136257314]},{"parameters":[{"l2_leaf_reg":1}],"learn":[0.360054198],"iteration":19,"passed_time":100.8948926,"remaining_time":0,"test":[0.8445438898,0.4137864584]}],"meta":{"test_sets":["test"],"test_metrics":[{"best_value":"Max","name":"AUC"},{"best_value":"Min","name":"Logloss"}],"learn_metrics":[{"best_value":"Min","name":"Logloss"}],"launch_mode":"Train","parameters":"parameters","iteration_count":20,"learn_sets":["learn"],"name":"experiment"}}}}},"layout":"IPY_MODEL_4230d38d80994280b98b71f445d5d8ab"}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"TK7oX5qdEEYr"},"source":["<p style=\"align: center;\"><img align=center src=\"https://s8.hostingkartinok.com/uploads/images/2018/08/308b49fcfbc619d629fe4604bceb67ac.jpg\" width=500 height=450/></p>\n","\n","<h3 style=\"text-align: center;\"><b>Школа глубокого обучения ФПМИ МФТИ</b></h3>\n","\n","<h3 style=\"text-align: center;\"><b>Домашнее задание. Продвинутый поток. Весна 2021</b></h3>\n","\n","Это домашнее задание будет посвящено полноценному решению задачи машинного обучения."]},{"cell_type":"markdown","metadata":{"id":"zlB-owfaEEYs"},"source":["Есть две части этого домашнего задания: \n","* Сделать полноценный отчет о вашей работе: как вы обработали данные, какие модели попробовали и какие результаты получились (максимум 10 баллов). За каждую выполненную часть будет начислено определенное количество баллов.\n","* Лучшее решение отправить в соревнование на [kaggle](https://www.kaggle.com/c/advanced-dls-spring-2021/) (максимум 5 баллов). За прохождение определенного порогов будут начисляться баллы.\n","\n","\n","**Обе части будут проверяться в формате peer-review. Т.е. вашу посылку на степик будут проверять несколько других студентов и аггрегация их оценок будет выставлена. В то же время вам тоже нужно будет проверить несколько других учеников.**\n","\n","**Пожалуйста, делайте свою работу чистой и понятной, чтобы облегчить проверку. Если у вас будут проблемы с решением или хочется совета, то пишите в наш чат в телеграме или в лс @runfme. Если вы захотите проаппелировать оценку, то пипшите в лс @runfme.**\n","\n","**Во всех пунктах указания это минимальный набор вещей, которые стоит сделать. Если вы можете сделать какой-то шаг лучше или добавить что-то свое - дерзайте!**"]},{"cell_type":"markdown","metadata":{"id":"Tu_JvqcBEN8Y"},"source":["# Как проверять?\n","\n","Ставьте полный балл, если выполнены все рекомендации или сделано что-то более интересное и сложное. За каждый отсустствующий пункт из рекомендация снижайте 1 балл."]},{"cell_type":"markdown","metadata":{"id":"ninJ63mJEEYt"},"source":["# Метрика\n","\n","Перед решением любой задачи важно понимать, как будет оцениваться ваше решение. В данном случае мы используем стандартную для задачи классификации метрику ROC-AUC. Ее можно вычислить используя только предсказанные вероятности и истинные классы без конкретного порога классификации + она раотает даже если классы в данных сильно несбалансированны (примеров одного класса в десятки раз больше примеров длугого). Именно поэтому она очень удобна для соревнований.\n","\n","Посчитать ее легко:\n"]},{"cell_type":"code","metadata":{"id":"SQIrka7yEEYu","outputId":"072b4e83-860c-4a13-89ec-974173c9c9be","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665819651957,"user_tz":-180,"elapsed":416,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"source":["from sklearn.metrics import roc_auc_score\n","\n","y_true = [\n","    0,\n","    1,\n","    1,\n","    0,\n","    1\n","]\n","\n","y_predictions = [\n","    0.1,\n","    0.9,\n","    0.4,\n","    0.6,\n","    0.61\n","]\n","\n","roc_auc_score(y_true, y_predictions)"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8333333333333333"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"IrDNNkNTEEYz"},"source":["# Первая часть. Исследование"]},{"cell_type":"code","metadata":{"id":"lzLqEeZKEEYz","executionInfo":{"status":"ok","timestamp":1665819652509,"user_tz":-180,"elapsed":8,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"source":["import pandas as pd\n","import numpy as np\n","from matplotlib import pyplot as plt"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LOlxdURSEEY3"},"source":["## Загрузка данных (2 балла)\n","\n","1) Посмотрите на случайные строчки. \n","\n","2) Посмотрите, есть ли в датасете незаполненные значения (nan'ы) с помощью data.isna() или data.info() и, если нужно, замените их на что-то. Будет хорошо, если вы построите табличку с количеством nan в каждой колонке."]},{"cell_type":"code","metadata":{"id":"pw-Brue9EEY3","executionInfo":{"status":"ok","timestamp":1665819652509,"user_tz":-180,"elapsed":7,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"source":["data = pd.read_csv('./train.csv')"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"KgnkkF5bEEY9","executionInfo":{"status":"ok","timestamp":1665819652510,"user_tz":-180,"elapsed":7,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"source":["# Для вашего удобства списки с именами разных колонок\n","\n","# Числовые признаки\n","num_cols = [\n","    'ClientPeriod',\n","    'MonthlySpending',\n","    'TotalSpent'\n","]\n","\n","# Категориальные признаки\n","cat_cols = [\n","    'Sex',\n","    'IsSeniorCitizen',\n","    'HasPartner',\n","    'HasChild',\n","    'HasPhoneService',\n","    'HasMultiplePhoneNumbers',\n","    'HasInternetService',\n","    'HasOnlineSecurityService',\n","    'HasOnlineBackup',\n","    'HasDeviceProtection',\n","    'HasTechSupportAccess',\n","    'HasOnlineTV',\n","    'HasMovieSubscription',\n","    'HasContractPhone',\n","    'IsBillingPaperless',\n","    'PaymentMethod'\n","]\n","\n","feature_cols = num_cols + cat_cols\n","target_col = 'Churn'"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":["Посмотрим 10 случайных обьектов из датасета."],"metadata":{"id":"nCSQDr4WHRlW"}},{"cell_type":"code","metadata":{"id":"tHC6gWabEEZA","colab":{"base_uri":"https://localhost:8080/","height":566},"executionInfo":{"status":"ok","timestamp":1665819653050,"user_tz":-180,"elapsed":546,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"13e675cd-5dd4-44a2-db79-d68cb510df8c"},"source":["data.sample(10)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      ClientPeriod  MonthlySpending TotalSpent     Sex  IsSeniorCitizen  \\\n","2681            16            75.40     1189.4    Male                0   \n","1691            45            97.05    4385.05  Female                1   \n","3989            72            60.95    4549.05    Male                0   \n","3296            28            50.80     1386.8    Male                0   \n","1225            25            99.30     2513.5    Male                0   \n","4157            72           104.15    7303.05  Female                0   \n","4671            15            56.15      931.9  Female                0   \n","4554             1            45.65      45.65    Male                0   \n","4396            13            97.00    1334.45    Male                0   \n","4912             5            55.80      300.4  Female                0   \n","\n","     HasPartner HasChild HasPhoneService HasMultiplePhoneNumbers  \\\n","2681        Yes       No             Yes                     Yes   \n","1691         No       No             Yes                     Yes   \n","3989        Yes      Yes              No        No phone service   \n","3296        Yes      Yes              No        No phone service   \n","1225         No       No             Yes                      No   \n","4157        Yes      Yes             Yes                     Yes   \n","4671         No       No             Yes                      No   \n","4554         No       No             Yes                      No   \n","4396        Yes      Yes             Yes                      No   \n","4912         No       No             Yes                      No   \n","\n","     HasInternetService HasOnlineSecurityService HasOnlineBackup  \\\n","2681        Fiber optic                       No              No   \n","1691        Fiber optic                      Yes             Yes   \n","3989                DSL                      Yes              No   \n","3296                DSL                      Yes              No   \n","1225        Fiber optic                       No              No   \n","4157        Fiber optic                      Yes             Yes   \n","4671                DSL                       No              No   \n","4554                DSL                       No              No   \n","4396        Fiber optic                       No              No   \n","4912                DSL                      Yes              No   \n","\n","     HasDeviceProtection HasTechSupportAccess HasOnlineTV  \\\n","2681                  No                   No          No   \n","1691                  No                  Yes         Yes   \n","3989                 Yes                  Yes         Yes   \n","3296                 Yes                  Yes         Yes   \n","1225                 Yes                  Yes         Yes   \n","4157                  No                   No         Yes   \n","4671                  No                   No         Yes   \n","4554                  No                   No          No   \n","4396                 Yes                   No         Yes   \n","4912                 Yes                   No          No   \n","\n","     HasMovieSubscription HasContractPhone IsBillingPaperless  \\\n","2681                   No   Month-to-month                Yes   \n","1691                   No   Month-to-month                Yes   \n","3989                  Yes         Two year                 No   \n","3296                   No         One year                 No   \n","1225                  Yes         Two year                 No   \n","4157                  Yes         One year                Yes   \n","4671                   No         One year                 No   \n","4554                   No   Month-to-month                Yes   \n","4396                  Yes   Month-to-month                 No   \n","4912                   No   Month-to-month                 No   \n","\n","                  PaymentMethod  Churn  \n","2681           Electronic check      0  \n","1691           Electronic check      0  \n","3989  Bank transfer (automatic)      0  \n","3296               Mailed check      0  \n","1225  Bank transfer (automatic)      0  \n","4157           Electronic check      0  \n","4671               Mailed check      0  \n","4554           Electronic check      1  \n","4396           Electronic check      0  \n","4912    Credit card (automatic)      0  "],"text/html":["\n","  <div id=\"df-f3667139-f95d-4bc9-870a-8a16afdc88bf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ClientPeriod</th>\n","      <th>MonthlySpending</th>\n","      <th>TotalSpent</th>\n","      <th>Sex</th>\n","      <th>IsSeniorCitizen</th>\n","      <th>HasPartner</th>\n","      <th>HasChild</th>\n","      <th>HasPhoneService</th>\n","      <th>HasMultiplePhoneNumbers</th>\n","      <th>HasInternetService</th>\n","      <th>HasOnlineSecurityService</th>\n","      <th>HasOnlineBackup</th>\n","      <th>HasDeviceProtection</th>\n","      <th>HasTechSupportAccess</th>\n","      <th>HasOnlineTV</th>\n","      <th>HasMovieSubscription</th>\n","      <th>HasContractPhone</th>\n","      <th>IsBillingPaperless</th>\n","      <th>PaymentMethod</th>\n","      <th>Churn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2681</th>\n","      <td>16</td>\n","      <td>75.40</td>\n","      <td>1189.4</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Fiber optic</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1691</th>\n","      <td>45</td>\n","      <td>97.05</td>\n","      <td>4385.05</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Fiber optic</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3989</th>\n","      <td>72</td>\n","      <td>60.95</td>\n","      <td>4549.05</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No phone service</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Two year</td>\n","      <td>No</td>\n","      <td>Bank transfer (automatic)</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3296</th>\n","      <td>28</td>\n","      <td>50.80</td>\n","      <td>1386.8</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No phone service</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>One year</td>\n","      <td>No</td>\n","      <td>Mailed check</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1225</th>\n","      <td>25</td>\n","      <td>99.30</td>\n","      <td>2513.5</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Fiber optic</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Two year</td>\n","      <td>No</td>\n","      <td>Bank transfer (automatic)</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4157</th>\n","      <td>72</td>\n","      <td>104.15</td>\n","      <td>7303.05</td>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Fiber optic</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>One year</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4671</th>\n","      <td>15</td>\n","      <td>56.15</td>\n","      <td>931.9</td>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>One year</td>\n","      <td>No</td>\n","      <td>Mailed check</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4554</th>\n","      <td>1</td>\n","      <td>45.65</td>\n","      <td>45.65</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4396</th>\n","      <td>13</td>\n","      <td>97.00</td>\n","      <td>1334.45</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Fiber optic</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>Month-to-month</td>\n","      <td>No</td>\n","      <td>Electronic check</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4912</th>\n","      <td>5</td>\n","      <td>55.80</td>\n","      <td>300.4</td>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>No</td>\n","      <td>Credit card (automatic)</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3667139-f95d-4bc9-870a-8a16afdc88bf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f3667139-f95d-4bc9-870a-8a16afdc88bf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f3667139-f95d-4bc9-870a-8a16afdc88bf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["Проверим на nan все столбцы."],"metadata":{"id":"Talh1giiHXtY"}},{"cell_type":"code","source":["data.info(), data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1SYxO3p7G0YS","executionInfo":{"status":"ok","timestamp":1665819653051,"user_tz":-180,"elapsed":30,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"a9a308f0-582c-4148-fad1-fee037e6e922"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5282 entries, 0 to 5281\n","Data columns (total 20 columns):\n"," #   Column                    Non-Null Count  Dtype  \n","---  ------                    --------------  -----  \n"," 0   ClientPeriod              5282 non-null   int64  \n"," 1   MonthlySpending           5282 non-null   float64\n"," 2   TotalSpent                5282 non-null   object \n"," 3   Sex                       5282 non-null   object \n"," 4   IsSeniorCitizen           5282 non-null   int64  \n"," 5   HasPartner                5282 non-null   object \n"," 6   HasChild                  5282 non-null   object \n"," 7   HasPhoneService           5282 non-null   object \n"," 8   HasMultiplePhoneNumbers   5282 non-null   object \n"," 9   HasInternetService        5282 non-null   object \n"," 10  HasOnlineSecurityService  5282 non-null   object \n"," 11  HasOnlineBackup           5282 non-null   object \n"," 12  HasDeviceProtection       5282 non-null   object \n"," 13  HasTechSupportAccess      5282 non-null   object \n"," 14  HasOnlineTV               5282 non-null   object \n"," 15  HasMovieSubscription      5282 non-null   object \n"," 16  HasContractPhone          5282 non-null   object \n"," 17  IsBillingPaperless        5282 non-null   object \n"," 18  PaymentMethod             5282 non-null   object \n"," 19  Churn                     5282 non-null   int64  \n","dtypes: float64(1), int64(3), object(16)\n","memory usage: 825.4+ KB\n"]},{"output_type":"execute_result","data":{"text/plain":["(None, (5282, 20))"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["Как видим, в каждом столбце 5282 не nan обьектов что совпадает с количеством строк в общем. Можно еще так посмотреть, что нет nan:"],"metadata":{"id":"xLooSN8sHQe5"}},{"cell_type":"code","source":["data.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uTrzZB16G5WW","executionInfo":{"status":"ok","timestamp":1665819653052,"user_tz":-180,"elapsed":23,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"e2798eae-28c2-4a6f-f7c9-d5bde3c9ff0b"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ClientPeriod                0\n","MonthlySpending             0\n","TotalSpent                  0\n","Sex                         0\n","IsSeniorCitizen             0\n","HasPartner                  0\n","HasChild                    0\n","HasPhoneService             0\n","HasMultiplePhoneNumbers     0\n","HasInternetService          0\n","HasOnlineSecurityService    0\n","HasOnlineBackup             0\n","HasDeviceProtection         0\n","HasTechSupportAccess        0\n","HasOnlineTV                 0\n","HasMovieSubscription        0\n","HasContractPhone            0\n","IsBillingPaperless          0\n","PaymentMethod               0\n","Churn                       0\n","dtype: int64"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"dK370bPCEEZD"},"source":["## Анализ данных (3 балла)\n","\n","1) Для численных призанков постройте гистограмму (*plt.hist(...)*) или boxplot (*plt.boxplot(...)*). Для категориальных посчитайте количество каждого значения для каждого признака. Для каждой колонки надо сделать *data.value_counts()* и построить bar диаграммы *plt.bar(...)* или круговые диаграммы *plt.pie(...)* (хорошо, елси вы сможете это сделать на одном гарфике с помощью *plt.subplots(...)*). \n","\n","2) Посмотрите на распределение целевой переменной и скажите, являются ли классы несбалансированными.\n","\n","3) (Если будет желание) Поиграйте с разными библиотеками для визуализации - *sns*, *pandas_visual_analysis*, etc.\n","\n","Второй пункт очень важен, потому что существуют задачи классификации с несбалансированными классами. Например, это может значить, что в датасете намного больше примеров 0 класса. В таких случаях нужно 1) не использовать accuracy как метрику 2) использовать методы борьбы с imbalanced dataset (обычно если датасет сильно несбалансирован, т.е. класса 1 в 20 раз меньше класса 0)."]},{"cell_type":"markdown","source":["Выведем для начала категориальные признаки."],"metadata":{"id":"zPas8jw0WsFg"}},{"cell_type":"code","source":["len(cat_cols)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-Dbkp-JnTZNh","executionInfo":{"status":"ok","timestamp":1665819653054,"user_tz":-180,"elapsed":18,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"3026b90b-81f2-49e6-d41f-c8ea100d9a7a"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["16"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"NZkbgFJZEEZE","colab":{"base_uri":"https://localhost:8080/","height":662},"executionInfo":{"status":"ok","timestamp":1665819809846,"user_tz":-180,"elapsed":2917,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"ff88b772-b4c8-40ac-8005-06b4f82ed5f0"},"source":["plt.figure('categorial', figsize = (20, 20))\n","\n","for i in range(len(cat_cols) - 1):\n","  cat = cat_cols[i]\n","  plt.subplot(len(cat_cols)//5 + 1, 5, i + 1)\n","  plt.title(cat)\n","  count = data[cat].value_counts()\n","  plt.bar(count.axes[0], count)\n","  plt.xticks(count.axes[0])\n","\n","plt.subplot(5, 1, 5)\n","plt.title(cat_cols[-1])\n","count = data[cat_cols[-1]].value_counts()\n","plt.bar(count.axes[0], count)\n","\n","plt.show()"],"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x1440 with 16 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["А теперь численные."],"metadata":{"id":"Fjoh7E7YW45v"}},{"cell_type":"code","source":["for i in range(len(num_cols)):\n","  print(data[num_cols[i]].dtype)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wrn4N0okPtY0","executionInfo":{"status":"ok","timestamp":1665819654719,"user_tz":-180,"elapsed":42,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"35750c3e-b297-4fe7-c996-1b94b8542ed6"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["int64\n","float64\n","object\n"]}]},{"cell_type":"markdown","source":["У последнего признака тип не численный. Попытаемся привести."],"metadata":{"id":"AtpM4fJiQ-9h"}},{"cell_type":"code","source":["data[num_cols[2]].astype('float64')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":328},"id":"B7dcsb0DRbsM","executionInfo":{"status":"error","timestamp":1665819654720,"user_tz":-180,"elapsed":38,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"d3c00d78-0102-4afa-ef76-93d331f0df15"},"execution_count":18,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-a8f3327bd87d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnum_cols\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'float64'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   5813\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5814\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5815\u001b[0;31m             \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5816\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5817\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"raise\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 418\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    419\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m     def convert(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, ignore_failures, **kwargs)\u001b[0m\n\u001b[1;32m    325\u001b[0m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 327\u001b[0;31m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    328\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    329\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mignore_failures\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    589\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    590\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 591\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array_safe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    592\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    593\u001b[0m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_coerce_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   1307\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1308\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1309\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1310\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mValueError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1311\u001b[0m         \u001b[0;31m# e.g. astype_nansafe can fail on object-dtype of strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m   1255\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1256\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1257\u001b[0;31m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m     \u001b[0;31m# in pandas we don't store numpy str dtypes, so convert to object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m   1199\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1200\u001b[0m         \u001b[0;31m# Explicit copy, or required since NumPy can't view from / to object.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1201\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1203\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: "]}]},{"cell_type":"markdown","source":["Не приводится, тк где то есть неприводимая строка. Посмотрим на значения в столбце."],"metadata":{"id":"8kAvo_IDRi3t"}},{"cell_type":"code","source":["data[num_cols[2]].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HRYnZSMCRrN5","executionInfo":{"status":"ok","timestamp":1665819661947,"user_tz":-180,"elapsed":3,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"d1698aef-19a7-49cf-a206-72d652185717"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           9\n","20.2       9\n","19.75      8\n","20.05      6\n","19.65      6\n","          ..\n","41.85      1\n","4326.25    1\n","950.2      1\n","4264       1\n","1375.6     1\n","Name: TotalSpent, Length: 4978, dtype: int64"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["Видим что есть пропуски в виде пустой строки. Их не так много, поэтому удалим из всего датасета такие строки."],"metadata":{"id":"c8f4vR9HRycq"}},{"cell_type":"code","source":["data.replace(' ', np.nan, inplace = True)"],"metadata":{"id":"XAK-zKbGSCp7","executionInfo":{"status":"ok","timestamp":1665819662938,"user_tz":-180,"elapsed":4,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["data.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dayUbs4gSP5X","executionInfo":{"status":"ok","timestamp":1665819665641,"user_tz":-180,"elapsed":7,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"a3773612-ae9c-4d32-b388-a49e7ac33efc"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ClientPeriod                0\n","MonthlySpending             0\n","TotalSpent                  9\n","Sex                         0\n","IsSeniorCitizen             0\n","HasPartner                  0\n","HasChild                    0\n","HasPhoneService             0\n","HasMultiplePhoneNumbers     0\n","HasInternetService          0\n","HasOnlineSecurityService    0\n","HasOnlineBackup             0\n","HasDeviceProtection         0\n","HasTechSupportAccess        0\n","HasOnlineTV                 0\n","HasMovieSubscription        0\n","HasContractPhone            0\n","IsBillingPaperless          0\n","PaymentMethod               0\n","Churn                       0\n","dtype: int64"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["data.dropna(inplace = True)"],"metadata":{"id":"iOCXPoCVTX5c","executionInfo":{"status":"ok","timestamp":1665819669059,"user_tz":-180,"elapsed":6,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":["Проверим теперь."],"metadata":{"id":"Rawl7lZ5Tylz"}},{"cell_type":"code","source":["data[num_cols[2]].astype('float64')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kF2jmpOKS_-5","executionInfo":{"status":"ok","timestamp":1665819670940,"user_tz":-180,"elapsed":5,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"19ffd056-def4-43c7-a438-2caf66b45bdd"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       1026.35\n","1       1872.20\n","2         75.90\n","3       2570.00\n","4       6758.45\n","         ...   \n","5277      82.15\n","5278    2188.45\n","5279      55.05\n","5280    2215.25\n","5281    1375.60\n","Name: TotalSpent, Length: 5273, dtype: float64"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["Все сработало."],"metadata":{"id":"AO2fDhbXT1br"}},{"cell_type":"code","source":["plt.figure('numeric', figsize = (15, 5))\n","for i in range(len(num_cols)):\n","  plt.subplot(1, 3, i + 1)\n","  plt.boxplot(data[num_cols[i]].astype('float64'))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":250},"id":"bSQQLg8WW9R9","executionInfo":{"status":"ok","timestamp":1665819674392,"user_tz":-180,"elapsed":614,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"169836db-4144-4f88-cf48-76a3c6421594"},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 3 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure('numeric', figsize = (15, 5))\n","for i in range(len(num_cols) - 1):\n","  plt.subplot(2, 2, i + 1)\n","  plt.hist(data[num_cols[i]])\n","plt.subplot(2, 1, 2)\n","plt.hist(data[num_cols[2]].astype('float64'))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"gEWi9HPZNRC5","executionInfo":{"status":"ok","timestamp":1665819678609,"user_tz":-180,"elapsed":890,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"58e851ae-9da3-48a4-dd84-23c7b43072ee"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 3 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"zg60u3QDEEZH"},"source":["(Дополнительно) Если вы нашли какие-то ошибки в данных или выбросы, то можете их убрать. Тут можно поэксперементировать с обработкой данных как угодно, но не за баллы."]},{"cell_type":"markdown","source":["Посмотрим на балансировку классов."],"metadata":{"id":"zM84R2xuSiC1"}},{"cell_type":"code","metadata":{"id":"fwfksF1gEEZI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665819681821,"user_tz":-180,"elapsed":9,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"092c33b0-1015-40dd-acc8-76e93c85913e"},"source":["data['Churn'].value_counts()"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    3889\n","1    1384\n","Name: Churn, dtype: int64"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["1 класса примерно в 3 раза меньше на тренировочной выборке."],"metadata":{"id":"FVHelFoYaqtu"}},{"cell_type":"markdown","metadata":{"id":"DviiJd8REEZK"},"source":["## Применение линейных моделей (3 балла)\n","\n","1) Обработайте данные для того, чтобы к ним можно было применить LogisticRegression. Т.е. отнормируйте числовые признаки, а категориальные закодируйте с помощью one-hot-encoding'а. \n","\n","2) С помощью кроссвалидации или разделения на train/valid выборку протестируйте разные значения гиперпараметра C и выберите лучший (можно тестировать С=100, 10, 1, 0.1, 0.01, 0.001) по метрике ROC-AUC. \n","\n","Если вы разделяете на train/valid, то используйте LogisticRegressionCV. Он сам при вызове .fit() подберет параметр С. (не забудьте передать scroing='roc_auc', чтобы при кроссвалидации сравнивались значения этой метрики, и refit=True, чтобы при потом модель обучилась на всем датасете с лучшим параметром C). \n","\n","\n","(более сложный вариант) Если вы будете использовать кроссвалидацию, то преобразования данных и LogisticRegression нужно соединить в один Pipeline с помощью make_pipeline, как это делалось во втором семинаре. Потом pipeline надо передать в GridSearchCV. Для one-hot-encoding'a можно испльзовать комбинацию LabelEncoder + OneHotEncoder (сначала превращаем строчки в числа, а потом числа првращаем в one-hot вектора.)"]},{"cell_type":"code","metadata":{"id":"xHCLDmwqEEZL","executionInfo":{"status":"ok","timestamp":1665819685867,"user_tz":-180,"elapsed":5,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"source":["from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.preprocessing import StandardScaler, RobustScaler, LabelEncoder, OneHotEncoder\n","from sklearn.pipeline import make_pipeline"],"execution_count":27,"outputs":[]},{"cell_type":"code","source":["dumm_data = pd.concat([data[num_cols], pd.get_dummies(data[cat_cols])], axis = 1) "],"metadata":{"id":"vlYCrxzS2YcJ","executionInfo":{"status":"ok","timestamp":1665820511505,"user_tz":-180,"elapsed":409,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["dumm_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":522},"id":"4zAQUQhR2g5h","executionInfo":{"status":"ok","timestamp":1665820513859,"user_tz":-180,"elapsed":455,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"cbe0b628-2e9f-480c-df2e-f9ef89c8691c"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      ClientPeriod  MonthlySpending TotalSpent  IsSeniorCitizen  Sex_Female  \\\n","0               55            19.50    1026.35                0           0   \n","1               72            25.85     1872.2                0           0   \n","2                1            75.90       75.9                0           0   \n","3               32            79.30       2570                1           1   \n","4               60           115.25    6758.45                0           1   \n","...            ...              ...        ...              ...         ...   \n","5277             3            30.40      82.15                0           0   \n","5278            50            44.45    2188.45                0           0   \n","5279             1            55.05      55.05                0           0   \n","5280            29            76.00    2215.25                0           1   \n","5281            19            75.90     1375.6                0           1   \n","\n","      Sex_Male  HasPartner_No  HasPartner_Yes  HasChild_No  HasChild_Yes  ...  \\\n","0            1              0               1            0             1  ...   \n","1            1              0               1            1             0  ...   \n","2            1              1               0            1             0  ...   \n","3            0              0               1            1             0  ...   \n","4            0              0               1            0             1  ...   \n","...        ...            ...             ...          ...           ...  ...   \n","5277         1              1               0            1             0  ...   \n","5278         1              0               1            1             0  ...   \n","5279         1              1               0            1             0  ...   \n","5280         0              1               0            1             0  ...   \n","5281         0              1               0            0             1  ...   \n","\n","      HasMovieSubscription_Yes  HasContractPhone_Month-to-month  \\\n","0                            0                                0   \n","1                            0                                0   \n","2                            0                                1   \n","3                            0                                1   \n","4                            1                                0   \n","...                        ...                              ...   \n","5277                         0                                1   \n","5278                         0                                0   \n","5279                         0                                1   \n","5280                         0                                1   \n","5281                         0                                1   \n","\n","      HasContractPhone_One year  HasContractPhone_Two year  \\\n","0                             1                          0   \n","1                             0                          1   \n","2                             0                          0   \n","3                             0                          0   \n","4                             0                          1   \n","...                         ...                        ...   \n","5277                          0                          0   \n","5278                          1                          0   \n","5279                          0                          0   \n","5280                          0                          0   \n","5281                          0                          0   \n","\n","      IsBillingPaperless_No  IsBillingPaperless_Yes  \\\n","0                         1                       0   \n","1                         1                       0   \n","2                         0                       1   \n","3                         1                       0   \n","4                         1                       0   \n","...                     ...                     ...   \n","5277                      1                       0   \n","5278                      0                       1   \n","5279                      1                       0   \n","5280                      0                       1   \n","5281                      0                       1   \n","\n","      PaymentMethod_Bank transfer (automatic)  \\\n","0                                           0   \n","1                                           0   \n","2                                           0   \n","3                                           0   \n","4                                           0   \n","...                                       ...   \n","5277                                        0   \n","5278                                        1   \n","5279                                        0   \n","5280                                        0   \n","5281                                        0   \n","\n","      PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n","0                                         0                               0   \n","1                                         1                               0   \n","2                                         0                               1   \n","3                                         0                               0   \n","4                                         1                               0   \n","...                                     ...                             ...   \n","5277                                      0                               1   \n","5278                                      0                               0   \n","5279                                      0                               0   \n","5280                                      1                               0   \n","5281                                      0                               0   \n","\n","      PaymentMethod_Mailed check  \n","0                              1  \n","1                              0  \n","2                              0  \n","3                              1  \n","4                              0  \n","...                          ...  \n","5277                           0  \n","5278                           0  \n","5279                           1  \n","5280                           0  \n","5281                           1  \n","\n","[5273 rows x 45 columns]"],"text/html":["\n","  <div id=\"df-64481db5-48e7-474b-a8af-259cbbe294ba\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ClientPeriod</th>\n","      <th>MonthlySpending</th>\n","      <th>TotalSpent</th>\n","      <th>IsSeniorCitizen</th>\n","      <th>Sex_Female</th>\n","      <th>Sex_Male</th>\n","      <th>HasPartner_No</th>\n","      <th>HasPartner_Yes</th>\n","      <th>HasChild_No</th>\n","      <th>HasChild_Yes</th>\n","      <th>...</th>\n","      <th>HasMovieSubscription_Yes</th>\n","      <th>HasContractPhone_Month-to-month</th>\n","      <th>HasContractPhone_One year</th>\n","      <th>HasContractPhone_Two year</th>\n","      <th>IsBillingPaperless_No</th>\n","      <th>IsBillingPaperless_Yes</th>\n","      <th>PaymentMethod_Bank transfer (automatic)</th>\n","      <th>PaymentMethod_Credit card (automatic)</th>\n","      <th>PaymentMethod_Electronic check</th>\n","      <th>PaymentMethod_Mailed check</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>55</td>\n","      <td>19.50</td>\n","      <td>1026.35</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>72</td>\n","      <td>25.85</td>\n","      <td>1872.2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>75.90</td>\n","      <td>75.9</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>32</td>\n","      <td>79.30</td>\n","      <td>2570</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60</td>\n","      <td>115.25</td>\n","      <td>6758.45</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5277</th>\n","      <td>3</td>\n","      <td>30.40</td>\n","      <td>82.15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5278</th>\n","      <td>50</td>\n","      <td>44.45</td>\n","      <td>2188.45</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5279</th>\n","      <td>1</td>\n","      <td>55.05</td>\n","      <td>55.05</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5280</th>\n","      <td>29</td>\n","      <td>76.00</td>\n","      <td>2215.25</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5281</th>\n","      <td>19</td>\n","      <td>75.90</td>\n","      <td>1375.6</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5273 rows × 45 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64481db5-48e7-474b-a8af-259cbbe294ba')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-64481db5-48e7-474b-a8af-259cbbe294ba button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-64481db5-48e7-474b-a8af-259cbbe294ba');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":43}]},{"cell_type":"markdown","source":["Теперь уберем столбцы вида HasOnlineTV_NoInternetService. Тк эти столбцы просто дублируют информацию InternetService_No(полностью совпадая с ним, что не очень хорошо для логистической регрессии.)"],"metadata":{"id":"BvgergFfmono"}},{"cell_type":"code","source":["dumm_data.columns, dumm_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zzkKozAanLFY","executionInfo":{"status":"ok","timestamp":1665820521783,"user_tz":-180,"elapsed":518,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"ad60f1f7-b029-4610-d997-9280e56106cd"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(Index(['ClientPeriod', 'MonthlySpending', 'TotalSpent', 'IsSeniorCitizen',\n","        'Sex_Female', 'Sex_Male', 'HasPartner_No', 'HasPartner_Yes',\n","        'HasChild_No', 'HasChild_Yes', 'HasPhoneService_No',\n","        'HasPhoneService_Yes', 'HasMultiplePhoneNumbers_No',\n","        'HasMultiplePhoneNumbers_No phone service',\n","        'HasMultiplePhoneNumbers_Yes', 'HasInternetService_DSL',\n","        'HasInternetService_Fiber optic', 'HasInternetService_No',\n","        'HasOnlineSecurityService_No',\n","        'HasOnlineSecurityService_No internet service',\n","        'HasOnlineSecurityService_Yes', 'HasOnlineBackup_No',\n","        'HasOnlineBackup_No internet service', 'HasOnlineBackup_Yes',\n","        'HasDeviceProtection_No', 'HasDeviceProtection_No internet service',\n","        'HasDeviceProtection_Yes', 'HasTechSupportAccess_No',\n","        'HasTechSupportAccess_No internet service', 'HasTechSupportAccess_Yes',\n","        'HasOnlineTV_No', 'HasOnlineTV_No internet service', 'HasOnlineTV_Yes',\n","        'HasMovieSubscription_No', 'HasMovieSubscription_No internet service',\n","        'HasMovieSubscription_Yes', 'HasContractPhone_Month-to-month',\n","        'HasContractPhone_One year', 'HasContractPhone_Two year',\n","        'IsBillingPaperless_No', 'IsBillingPaperless_Yes',\n","        'PaymentMethod_Bank transfer (automatic)',\n","        'PaymentMethod_Credit card (automatic)',\n","        'PaymentMethod_Electronic check', 'PaymentMethod_Mailed check'],\n","       dtype='object'), (5273, 45))"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["dumm_data.drop(columns=['HasMultiplePhoneNumbers_No phone service',\n","                        'HasOnlineSecurityService_No internet service',\n","                        'HasOnlineBackup_No internet service',\n","                        'HasDeviceProtection_No internet service',\n","                        'HasTechSupportAccess_No internet service',\n","                        'HasOnlineTV_No internet service',\n","                        'HasMovieSubscription_No internet service'], inplace=True)"],"metadata":{"id":"w4zicSAGnQ0L","executionInfo":{"status":"ok","timestamp":1665820526051,"user_tz":-180,"elapsed":3,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["dumm_data.columns, dumm_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PhwqW1b0oqGB","executionInfo":{"status":"ok","timestamp":1665820528499,"user_tz":-180,"elapsed":7,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"b5a87177-8bfe-423f-f45c-e7984207317f"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(Index(['ClientPeriod', 'MonthlySpending', 'TotalSpent', 'IsSeniorCitizen',\n","        'Sex_Female', 'Sex_Male', 'HasPartner_No', 'HasPartner_Yes',\n","        'HasChild_No', 'HasChild_Yes', 'HasPhoneService_No',\n","        'HasPhoneService_Yes', 'HasMultiplePhoneNumbers_No',\n","        'HasMultiplePhoneNumbers_Yes', 'HasInternetService_DSL',\n","        'HasInternetService_Fiber optic', 'HasInternetService_No',\n","        'HasOnlineSecurityService_No', 'HasOnlineSecurityService_Yes',\n","        'HasOnlineBackup_No', 'HasOnlineBackup_Yes', 'HasDeviceProtection_No',\n","        'HasDeviceProtection_Yes', 'HasTechSupportAccess_No',\n","        'HasTechSupportAccess_Yes', 'HasOnlineTV_No', 'HasOnlineTV_Yes',\n","        'HasMovieSubscription_No', 'HasMovieSubscription_Yes',\n","        'HasContractPhone_Month-to-month', 'HasContractPhone_One year',\n","        'HasContractPhone_Two year', 'IsBillingPaperless_No',\n","        'IsBillingPaperless_Yes', 'PaymentMethod_Bank transfer (automatic)',\n","        'PaymentMethod_Credit card (automatic)',\n","        'PaymentMethod_Electronic check', 'PaymentMethod_Mailed check'],\n","       dtype='object'), (5273, 38))"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["pipeline = make_pipeline(StandardScaler(), LogisticRegression())\n","grid = {'logisticregression__C':[1000, 100, 10, 1, 0.1, 0.01, 0.001]}\n","cv = GridSearchCV(pipeline, grid, n_jobs = -1, cv = 10, scoring = 'roc_auc')\n","cv.fit(dumm_data, data['Churn'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pIujARVec6Gw","executionInfo":{"status":"ok","timestamp":1665820539292,"user_tz":-180,"elapsed":6736,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"b10e9f12-e567-43d9-ee1b-0467d9487393"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=10,\n","             estimator=Pipeline(steps=[('standardscaler', StandardScaler()),\n","                                       ('logisticregression',\n","                                        LogisticRegression())]),\n","             n_jobs=-1,\n","             param_grid={'logisticregression__C': [1000, 100, 10, 1, 0.1, 0.01,\n","                                                   0.001]},\n","             scoring='roc_auc')"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["cv.best_estimator_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2meswF9je3dB","executionInfo":{"status":"ok","timestamp":1665820539293,"user_tz":-180,"elapsed":10,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"a720ea36-3447-4a0a-d88f-20fc3ee1cb84"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('standardscaler', StandardScaler()),\n","                ('logisticregression', LogisticRegression(C=10))])"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["cv.best_score_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zz5epWrS9T7K","executionInfo":{"status":"ok","timestamp":1665820540430,"user_tz":-180,"elapsed":648,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"916a3dd8-c354-4ba7-83b2-fab2731bdef0"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8446351009101333"]},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","metadata":{"id":"uVahy6JKEEZQ"},"source":["При 10 фолдах(т.е. 90% обучение 10% валидация) лучший параметр c = 10 и roc_auc = 0.8446"]},{"cell_type":"markdown","metadata":{"id":"BlTeVy7fEEZR"},"source":["## Применение градиентного бустинга (2 балла)\n","\n","Если вы хотите получить баллы за точный ответ, то стоит попробовать градиентный бустинг. Часто градиентный бустинг с дефолтными параметрами даст вам 80% результата за 0% усилий.\n","\n","Мы будем использовать catboost, поэтому нам не надо кодировать категориальные признаки. catboost сделает это сам (в .fit() надо передать cat_features=cat_cols). А численные признаки нормировать для моделей, основанных на деревьях не нужно.\n","\n","1) Разделите выборку на train/valid. Протестируйте catboost cо стандартными параметрами.\n","\n","2) Протестируйте разные занчения параметроа количества деревьев и learning_rate'а и выберите лучшую по метрике ROC-AUC комбинацию. \n","\n","(Дополнительно) Есть некоторые сложности с тем, чтобы использовать CatBoostClassifier вместе с GridSearchCV, поэтому мы не просим использовать кроссвалидацию. Но можете попробовать)"]},{"cell_type":"code","metadata":{"id":"Fioxxlp-EEZS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665820580550,"user_tz":-180,"elapsed":15240,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"e5d7f5ba-26cf-49e6-aabe-c5d6e45d8001"},"source":["!pip install catboost"],"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting catboost\n","  Downloading catboost-1.1-cp37-none-manylinux1_x86_64.whl (76.8 MB)\n","\u001b[K     |████████████████████████████████| 76.8 MB 1.1 MB/s \n","\u001b[?25hRequirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from catboost) (5.5.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from catboost) (3.2.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from catboost) (1.15.0)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.21.6)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from catboost) (0.10.1)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.3.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from catboost) (1.7.3)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2022.4)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (3.0.9)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (0.11.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (1.4.4)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib->catboost) (4.1.1)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from plotly->catboost) (8.1.0)\n","Installing collected packages: catboost\n","Successfully installed catboost-1.1\n"]}]},{"cell_type":"code","source":["from catboost import CatBoostClassifier\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"Ps5fB-a--y2w","executionInfo":{"status":"ok","timestamp":1665820580551,"user_tz":-180,"elapsed":12,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(data[data.columns[:-1]], data['Churn'], train_size = 0.9)"],"metadata":{"id":"FEOg52Sk_MLn","executionInfo":{"status":"ok","timestamp":1665820580551,"user_tz":-180,"elapsed":11,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["catboost = CatBoostClassifier(n_estimators = 500, learning_rate = 0.1, cat_features = cat_cols, verbose = 100)\n","catboost.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CyQNGkRJ_0z6","executionInfo":{"status":"ok","timestamp":1665820592807,"user_tz":-180,"elapsed":12267,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"d54f4b29-c9ec-41b4-b983-ebc4de945236"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["0:\tlearn: 0.6366684\ttotal: 63.1ms\tremaining: 31.5s\n","100:\tlearn: 0.3680907\ttotal: 1.73s\tremaining: 6.84s\n","200:\tlearn: 0.3299021\ttotal: 3.55s\tremaining: 5.28s\n","300:\tlearn: 0.2992046\ttotal: 5.19s\tremaining: 3.43s\n","400:\tlearn: 0.2694932\ttotal: 7.37s\tremaining: 1.82s\n","499:\tlearn: 0.2461926\ttotal: 11.8s\tremaining: 0us\n"]},{"output_type":"execute_result","data":{"text/plain":["<catboost.core.CatBoostClassifier at 0x7fbbe2c72fd0>"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","y_pred = catboost.predict_proba(X_test)[:, 1]\n","roc_auc_score(y_test, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xJnxZ5PyBDHL","executionInfo":{"status":"ok","timestamp":1665820592807,"user_tz":-180,"elapsed":32,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"40721419-e6e8-41f3-9b45-480a765b25da"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8503530286138982"]},"metadata":{},"execution_count":54}]},{"cell_type":"markdown","source":["Посмотрим теперь на валидацию по итерациям. На данный момент получен \n","скор - 0.85 при 500 итерациях, lr = 0.1. Размер тренировочной выборки 0.9"],"metadata":{"id":"gNjd-FgzppIs"}},{"cell_type":"code","source":["boosting_model = CatBoostClassifier(n_estimators = 300, \n","                                             silent=True,\n","                                             cat_features = cat_cols,\n","                                             eval_metric='AUC')\n","boosting_model.grid_search({'l2_leaf_reg': np.linspace(0, 1, 20)}, \n","                           X_train, \n","                           y_train, plot=True, refit=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["5f6806a5af5344be912872a6dbaffb6b"]},"id":"XSK28Lx4Uar3","executionInfo":{"status":"ok","timestamp":1665822022639,"user_tz":-180,"elapsed":118672,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"5a5ab5d4-942b-4275-d2c7-e14b1e7397e9"},"execution_count":76,"outputs":[{"output_type":"display_data","data":{"text/plain":["MetricVisualizer(layout=Layout(align_self='stretch', height='500px'))"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5f6806a5af5344be912872a6dbaffb6b"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","bestTest = 0.8433103844\n","bestIteration = 164\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","0:\tloss: 0.8433104\tbest: 0.8433104 (0)\ttotal: 4.12s\tremaining: 1m 18s\n","\n","bestTest = 0.843605852\n","bestIteration = 213\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","1:\tloss: 0.8436059\tbest: 0.8436059 (1)\ttotal: 8.33s\tremaining: 1m 14s\n","\n","bestTest = 0.8441738382\n","bestIteration = 249\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","2:\tloss: 0.8441738\tbest: 0.8441738 (2)\ttotal: 12.7s\tremaining: 1m 11s\n","\n","bestTest = 0.8451635112\n","bestIteration = 288\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","3:\tloss: 0.8451635\tbest: 0.8451635 (3)\ttotal: 18.5s\tremaining: 1m 14s\n","\n","bestTest = 0.8462048193\n","bestIteration = 299\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","4:\tloss: 0.8462048\tbest: 0.8462048 (4)\ttotal: 22.9s\tremaining: 1m 8s\n","\n","bestTest = 0.8433706254\n","bestIteration = 283\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","5:\tloss: 0.8433706\tbest: 0.8462048 (4)\ttotal: 27.1s\tremaining: 1m 3s\n","\n","bestTest = 0.8443516925\n","bestIteration = 264\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","6:\tloss: 0.8443517\tbest: 0.8462048 (4)\ttotal: 31.3s\tremaining: 58.1s\n","\n","bestTest = 0.8432415376\n","bestIteration = 158\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","7:\tloss: 0.8432415\tbest: 0.8462048 (4)\ttotal: 36.9s\tremaining: 55.4s\n","\n","bestTest = 0.8445094664\n","bestIteration = 299\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","8:\tloss: 0.8445095\tbest: 0.8462048 (4)\ttotal: 43.8s\tremaining: 53.6s\n","\n","bestTest = 0.843643144\n","bestIteration = 226\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","9:\tloss: 0.8436431\tbest: 0.8462048 (4)\ttotal: 50.6s\tremaining: 50.6s\n","\n","bestTest = 0.8445410212\n","bestIteration = 299\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","10:\tloss: 0.8445410\tbest: 0.8462048 (4)\ttotal: 57.2s\tremaining: 46.8s\n","\n","bestTest = 0.8460212278\n","bestIteration = 283\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","11:\tloss: 0.8460212\tbest: 0.8462048 (4)\ttotal: 1m 1s\tremaining: 41s\n","\n","bestTest = 0.8441250717\n","bestIteration = 263\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","12:\tloss: 0.8441251\tbest: 0.8462048 (4)\ttotal: 1m 5s\tremaining: 35.4s\n","\n","bestTest = 0.8445897877\n","bestIteration = 209\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","13:\tloss: 0.8445898\tbest: 0.8462048 (4)\ttotal: 1m 10s\tremaining: 30.3s\n","\n","bestTest = 0.8455393001\n","bestIteration = 295\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","14:\tloss: 0.8455393\tbest: 0.8462048 (4)\ttotal: 1m 15s\tremaining: 25s\n","\n","bestTest = 0.8447446931\n","bestIteration = 261\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","15:\tloss: 0.8447447\tbest: 0.8462048 (4)\ttotal: 1m 20s\tremaining: 20s\n","\n","bestTest = 0.8438611589\n","bestIteration = 298\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","16:\tloss: 0.8438612\tbest: 0.8462048 (4)\ttotal: 1m 25s\tremaining: 15.1s\n","\n","bestTest = 0.8426907631\n","bestIteration = 180\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","17:\tloss: 0.8426908\tbest: 0.8462048 (4)\ttotal: 1m 31s\tremaining: 10.2s\n","\n","bestTest = 0.8439959839\n","bestIteration = 293\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","18:\tloss: 0.8439960\tbest: 0.8462048 (4)\ttotal: 1m 36s\tremaining: 5.08s\n","\n","bestTest = 0.8445438898\n","bestIteration = 296\n","\n","Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n","19:\tloss: 0.8445439\tbest: 0.8462048 (4)\ttotal: 1m 40s\tremaining: 0us\n","Estimating final quality...\n","Training on fold [0/3]\n","\n","bestTest = 0.8319563229\n","bestIteration = 173\n","\n","Training on fold [1/3]\n","\n","bestTest = 0.8475738288\n","bestIteration = 188\n","\n","Training on fold [2/3]\n","\n","bestTest = 0.8503430532\n","bestIteration = 222\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["{'params': {'l2_leaf_reg': 0.21052631578947367},\n"," 'cv_results': defaultdict(list,\n","             {'iterations': [0,\n","               1,\n","               2,\n","               3,\n","               4,\n","               5,\n","               6,\n","               7,\n","               8,\n","               9,\n","               10,\n","               11,\n","               12,\n","               13,\n","               14,\n","               15,\n","               16,\n","               17,\n","               18,\n","               19,\n","               20,\n","               21,\n","               22,\n","               23,\n","               24,\n","               25,\n","               26,\n","               27,\n","               28,\n","               29,\n","               30,\n","               31,\n","               32,\n","               33,\n","               34,\n","               35,\n","               36,\n","               37,\n","               38,\n","               39,\n","               40,\n","               41,\n","               42,\n","               43,\n","               44,\n","               45,\n","               46,\n","               47,\n","               48,\n","               49,\n","               50,\n","               51,\n","               52,\n","               53,\n","               54,\n","               55,\n","               56,\n","               57,\n","               58,\n","               59,\n","               60,\n","               61,\n","               62,\n","               63,\n","               64,\n","               65,\n","               66,\n","               67,\n","               68,\n","               69,\n","               70,\n","               71,\n","               72,\n","               73,\n","               74,\n","               75,\n","               76,\n","               77,\n","               78,\n","               79,\n","               80,\n","               81,\n","               82,\n","               83,\n","               84,\n","               85,\n","               86,\n","               87,\n","               88,\n","               89,\n","               90,\n","               91,\n","               92,\n","               93,\n","               94,\n","               95,\n","               96,\n","               97,\n","               98,\n","               99,\n","               100,\n","               101,\n","               102,\n","               103,\n","               104,\n","               105,\n","               106,\n","               107,\n","               108,\n","               109,\n","               110,\n","               111,\n","               112,\n","               113,\n","               114,\n","               115,\n","               116,\n","               117,\n","               118,\n","               119,\n","               120,\n","               121,\n","               122,\n","               123,\n","               124,\n","               125,\n","               126,\n","               127,\n","               128,\n","               129,\n","               130,\n","               131,\n","               132,\n","               133,\n","               134,\n","               135,\n","               136,\n","               137,\n","               138,\n","               139,\n","               140,\n","               141,\n","               142,\n","               143,\n","               144,\n","               145,\n","               146,\n","               147,\n","               148,\n","               149,\n","               150,\n","               151,\n","               152,\n","               153,\n","               154,\n","               155,\n","               156,\n","               157,\n","               158,\n","               159,\n","               160,\n","               161,\n","               162,\n","               163,\n","               164,\n","               165,\n","               166,\n","               167,\n","               168,\n","               169,\n","               170,\n","               171,\n","               172,\n","               173,\n","               174,\n","               175,\n","               176,\n","               177,\n","               178,\n","               179,\n","               180,\n","               181,\n","               182,\n","               183,\n","               184,\n","               185,\n","               186,\n","               187,\n","               188,\n","               189,\n","               190,\n","               191,\n","               192,\n","               193,\n","               194,\n","               195,\n","               196,\n","               197,\n","               198,\n","               199,\n","               200,\n","               201,\n","               202,\n","               203,\n","               204,\n","               205,\n","               206,\n","               207,\n","               208,\n","               209,\n","               210,\n","               211,\n","               212,\n","               213,\n","               214,\n","               215,\n","               216,\n","               217,\n","               218,\n","               219,\n","               220,\n","               221,\n","               222,\n","               223,\n","               224,\n","               225,\n","               226,\n","               227,\n","               228,\n","               229,\n","               230,\n","               231,\n","               232,\n","               233,\n","               234,\n","               235,\n","               236,\n","               237,\n","               238,\n","               239,\n","               240,\n","               241,\n","               242,\n","               243,\n","               244,\n","               245,\n","               246,\n","               247,\n","               248,\n","               249,\n","               250,\n","               251,\n","               252,\n","               253,\n","               254,\n","               255,\n","               256,\n","               257,\n","               258,\n","               259,\n","               260,\n","               261,\n","               262,\n","               263,\n","               264,\n","               265,\n","               266,\n","               267,\n","               268,\n","               269,\n","               270,\n","               271,\n","               272,\n","               273,\n","               274,\n","               275,\n","               276,\n","               277,\n","               278,\n","               279,\n","               280,\n","               281,\n","               282,\n","               283,\n","               284,\n","               285,\n","               286,\n","               287,\n","               288,\n","               289,\n","               290,\n","               291,\n","               292,\n","               293,\n","               294,\n","               295,\n","               296,\n","               297,\n","               298,\n","               299],\n","              'test-AUC-mean': [0.7970953476641043,\n","               0.8023834870676723,\n","               0.8028169679069483,\n","               0.8106187500728121,\n","               0.8124248355822187,\n","               0.8132817197609562,\n","               0.8142347401360627,\n","               0.8145214451022077,\n","               0.815554407498824,\n","               0.816348003341708,\n","               0.8187847298585998,\n","               0.820189629098448,\n","               0.8209027263327972,\n","               0.8214993894939652,\n","               0.8232524991047464,\n","               0.824218589035782,\n","               0.824670942958785,\n","               0.8246548668024763,\n","               0.8251372191928014,\n","               0.8259922463626302,\n","               0.8273786469434702,\n","               0.828399961567644,\n","               0.8289684554972375,\n","               0.8296201723422052,\n","               0.8300483702276898,\n","               0.8304505050131924,\n","               0.8310253206096668,\n","               0.8315876962877592,\n","               0.8322640024133897,\n","               0.8329179337127967,\n","               0.833539351862759,\n","               0.8342514553747509,\n","               0.8345818461094517,\n","               0.8348971134549702,\n","               0.8354295292569963,\n","               0.835547394211989,\n","               0.8360874683059382,\n","               0.836229992129871,\n","               0.8360894096134063,\n","               0.8365484603687019,\n","               0.8366173757302485,\n","               0.8365979012830259,\n","               0.8367483659549283,\n","               0.8368990044542093,\n","               0.8370878712725492,\n","               0.8373677643733268,\n","               0.8377601507113024,\n","               0.8377943693226718,\n","               0.8378713849117904,\n","               0.8379091802743331,\n","               0.8377060311439148,\n","               0.8379212722513296,\n","               0.8379888624983783,\n","               0.8381405039857773,\n","               0.8382689127339754,\n","               0.8384898375840409,\n","               0.8386618038615276,\n","               0.8387409668482199,\n","               0.8387796553478215,\n","               0.8388613807303389,\n","               0.8390335423039583,\n","               0.8390439089026103,\n","               0.8392082168881739,\n","               0.8390842891088094,\n","               0.8390354046140742,\n","               0.8390388376991268,\n","               0.8390711266568864,\n","               0.8391166409204969,\n","               0.8392481641378566,\n","               0.8393341977842205,\n","               0.8393604598341385,\n","               0.839235784828619,\n","               0.8393193345032532,\n","               0.8395245165473056,\n","               0.8396386139445586,\n","               0.8397619875491175,\n","               0.8397012599616852,\n","               0.8397256225192516,\n","               0.8397507839329852,\n","               0.8399151098768138,\n","               0.8398834222343057,\n","               0.8400395514248876,\n","               0.8400772996469845,\n","               0.8401290540728342,\n","               0.8401042774960938,\n","               0.8401744538525048,\n","               0.8403235419232113,\n","               0.8403778744583681,\n","               0.8404229365414914,\n","               0.8404648807882779,\n","               0.8403884171291818,\n","               0.8404420473338461,\n","               0.8403979354864376,\n","               0.8403345826492522,\n","               0.8402060685395613,\n","               0.8403197060429003,\n","               0.8404350801484998,\n","               0.8406242275647315,\n","               0.8406393757898427,\n","               0.8406491455628095,\n","               0.840729551586101,\n","               0.8407903250482734,\n","               0.8407779681868671,\n","               0.8408784432382834,\n","               0.840955942434853,\n","               0.841071579180079,\n","               0.841066052572248,\n","               0.8410154245975887,\n","               0.841045011982969,\n","               0.8410903915595914,\n","               0.8412086333515223,\n","               0.8412209071559525,\n","               0.8413645762251041,\n","               0.841459966604338,\n","               0.8414839981997065,\n","               0.8414729741662247,\n","               0.8414330516091564,\n","               0.8415722533214876,\n","               0.8415774970866439,\n","               0.8416646749991491,\n","               0.8416053947235812,\n","               0.8415764355908499,\n","               0.8415791730797596,\n","               0.8416702878878167,\n","               0.8415706386299654,\n","               0.8415699654816535,\n","               0.8416478540047828,\n","               0.8416553910784166,\n","               0.841684978463797,\n","               0.8415730935628284,\n","               0.8416822903601163,\n","               0.8416988477357785,\n","               0.8417979113918607,\n","               0.8418459970304286,\n","               0.8418927453515058,\n","               0.842021616381715,\n","               0.8420539345216556,\n","               0.8419999037665159,\n","               0.8420116054378756,\n","               0.8420322757812517,\n","               0.8420405174301612,\n","               0.8420784362557763,\n","               0.8421038635329969,\n","               0.8421244216372162,\n","               0.8420803434615546,\n","               0.8420603732038879,\n","               0.8420094333476874,\n","               0.8420363124263389,\n","               0.842028725967476,\n","               0.8420403423370767,\n","               0.8420947377261611,\n","               0.8420802963211088,\n","               0.8421724578905554,\n","               0.8420732114279622,\n","               0.8422210338709238,\n","               0.8422313757769614,\n","               0.8422547499374998,\n","               0.8423180264520586,\n","               0.8423497298080488,\n","               0.8423745265878374,\n","               0.8423845150838454,\n","               0.8423560283346495,\n","               0.842391395845041,\n","               0.8424320252221681,\n","               0.8424525810816043,\n","               0.8424666915244586,\n","               0.842438488597015,\n","               0.8424742824728876,\n","               0.8425671149458628,\n","               0.842560933147985,\n","               0.8425919700900129,\n","               0.8426105558897428,\n","               0.8426869387366459,\n","               0.8427448008825301,\n","               0.8426961363765421,\n","               0.8427615782469395,\n","               0.8427869830763289,\n","               0.8428627578736313,\n","               0.8428642972216043,\n","               0.842841010607608,\n","               0.8428262326283997,\n","               0.8428385715315411,\n","               0.8428006998463718,\n","               0.8428261989566529,\n","               0.8428276687163486,\n","               0.8428331459389508,\n","               0.8428153275684241,\n","               0.8428905055400415,\n","               0.8429242283409669,\n","               0.8427934186780153,\n","               0.8428442754772397,\n","               0.8428380196015186,\n","               0.8428069759251412,\n","               0.8428309491561482,\n","               0.8428426149109777,\n","               0.8428391706020092,\n","               0.8428301884612942,\n","               0.8428366518361411,\n","               0.8428796271308351,\n","               0.842873983937595,\n","               0.8428832207178818,\n","               0.8428907847289132,\n","               0.8429238478502258,\n","               0.8428797651849979,\n","               0.842903083225958,\n","               0.8428230676516174,\n","               0.8428209494362244,\n","               0.8427914249047719,\n","               0.8427638479851941,\n","               0.8428230900994489,\n","               0.8428464193643247,\n","               0.8428918842427061,\n","               0.842898083998849,\n","               0.8428336731763588,\n","               0.8428501744324427,\n","               0.8427566912589873,\n","               0.8428055375924094,\n","               0.8428096370914241,\n","               0.8428688724713295,\n","               0.8429262801919433,\n","               0.842934528575202,\n","               0.8430199317241337,\n","               0.8430247537566894,\n","               0.8429992546464083,\n","               0.8429765401654826,\n","               0.8429642169758234,\n","               0.8429490754850617,\n","               0.8429518825622484,\n","               0.8429098350554377,\n","               0.8429552460590238,\n","               0.842960045643748,\n","               0.8429221066150848,\n","               0.8429083293792118,\n","               0.842956437465611,\n","               0.8429131559013335,\n","               0.8429054145524345,\n","               0.8428675496016146,\n","               0.8428407446008066,\n","               0.8428448485893879,\n","               0.8428655234223301,\n","               0.8428648345605364,\n","               0.8428648659875003,\n","               0.8429303033683316,\n","               0.8429289997225878,\n","               0.8429159158380745,\n","               0.8422765869948486,\n","               0.8422641874825629,\n","               0.8423027233369113,\n","               0.8423109896784352,\n","               0.8423075498590332,\n","               0.8422631699033541,\n","               0.8422749276942922,\n","               0.842292880751807,\n","               0.8422489215496514,\n","               0.8422565080085143,\n","               0.8422620009445984,\n","               0.8422935898166487,\n","               0.8423060207558986,\n","               0.8422674871463331,\n","               0.8422061604884324,\n","               0.842169163982057,\n","               0.8421802104633699,\n","               0.842184395264144,\n","               0.8421287096980145,\n","               0.842147273049913,\n","               0.8420549925069604,\n","               0.8420854236441707,\n","               0.8420248733946059,\n","               0.84208054773682,\n","               0.8420022217676079,\n","               0.8420056660765761,\n","               0.8418660650794757,\n","               0.841919693039357,\n","               0.8419025321036601,\n","               0.8418935364942461,\n","               0.8418907900262041,\n","               0.8419741086314897,\n","               0.8419982120599183,\n","               0.8420043534516998,\n","               0.8419767204125437,\n","               0.8421049205392245,\n","               0.8420718619074782,\n","               0.8420126826471513,\n","               0.8420931964200334,\n","               0.8420856571016165,\n","               0.8421468602964449,\n","               0.8421567320637299,\n","               0.8421333062731793,\n","               0.8421209224743754,\n","               0.8421099959456458,\n","               0.8421203198934181,\n","               0.842210284680062,\n","               0.8422316438852316,\n","               0.8422388208144866,\n","               0.8422271438357415,\n","               0.8422492614909819,\n","               0.8422941160749794,\n","               0.8423498555159042,\n","               0.8423773808054699,\n","               0.8424139353761965],\n","              'test-AUC-std': [0.007959011107920114,\n","               0.008705878771463853,\n","               0.012701266517625001,\n","               0.016353981701014358,\n","               0.018871795008028505,\n","               0.02078830179217031,\n","               0.021275564759026176,\n","               0.021196830828209345,\n","               0.01973785256328116,\n","               0.01872463056372329,\n","               0.017565382530564343,\n","               0.01644864928358995,\n","               0.01702221773762909,\n","               0.016160830892467427,\n","               0.014876319131536492,\n","               0.014579167304811947,\n","               0.01395487439635997,\n","               0.01410389412014637,\n","               0.01395296735173576,\n","               0.013877755826867793,\n","               0.014119867254432058,\n","               0.013464554347837759,\n","               0.013260180853416535,\n","               0.012870356420498595,\n","               0.012277343045409766,\n","               0.012406454042114042,\n","               0.01216960953391717,\n","               0.012001225540025598,\n","               0.012131505511674348,\n","               0.011794012896506969,\n","               0.011711336965745486,\n","               0.012047929895058701,\n","               0.011613856793996517,\n","               0.011489782013403836,\n","               0.011296954015903103,\n","               0.011446096619623435,\n","               0.011328987301977482,\n","               0.011602330861423584,\n","               0.011986913750373886,\n","               0.011492892234423003,\n","               0.011594903666282009,\n","               0.011455678042965347,\n","               0.011513118121389903,\n","               0.0114504281121763,\n","               0.01116080432655886,\n","               0.011008146177066296,\n","               0.0110747908107731,\n","               0.010929620152088535,\n","               0.010894222823514436,\n","               0.010855058386272449,\n","               0.010761972595428066,\n","               0.010663982953353867,\n","               0.010498197249625906,\n","               0.010423519134392474,\n","               0.010468800916432782,\n","               0.01049957079720192,\n","               0.010442024966286644,\n","               0.010458078212210961,\n","               0.010547669072255197,\n","               0.01041830908820899,\n","               0.010513241758095888,\n","               0.01055263827378817,\n","               0.010433206455378789,\n","               0.010382392767249697,\n","               0.010359875891051692,\n","               0.010345439692710715,\n","               0.01030401229931166,\n","               0.010378666624639377,\n","               0.010463256571963439,\n","               0.010474648684750553,\n","               0.01055707357567675,\n","               0.010464059851480412,\n","               0.010411572401912626,\n","               0.010509569699822807,\n","               0.01041762765685115,\n","               0.010590390305115807,\n","               0.010438677929491692,\n","               0.010384386478572588,\n","               0.010424541677695649,\n","               0.010323024664202868,\n","               0.010288237563791054,\n","               0.010232651872135318,\n","               0.01015891888303343,\n","               0.010274088566270915,\n","               0.010269808972703038,\n","               0.010263559337118429,\n","               0.010365657103232461,\n","               0.010335158618415044,\n","               0.010324850934904414,\n","               0.010296569527500478,\n","               0.010234533805121111,\n","               0.01019840225331786,\n","               0.010141937034227099,\n","               0.010108322043054315,\n","               0.010259094188958175,\n","               0.01034634971484957,\n","               0.010152622820385565,\n","               0.010069446705383216,\n","               0.01007313855813995,\n","               0.010179084553760218,\n","               0.010102301506646755,\n","               0.01000035509727773,\n","               0.010023709688956885,\n","               0.010042699689574087,\n","               0.01011148431583687,\n","               0.010143330183053816,\n","               0.010118954107700029,\n","               0.010082286579243486,\n","               0.010081156061218358,\n","               0.010050119037334009,\n","               0.00995879241542213,\n","               0.009873398111891706,\n","               0.009749427559139424,\n","               0.009546171412017605,\n","               0.00950417923346385,\n","               0.009497350860120914,\n","               0.00949264381423918,\n","               0.009636869439225851,\n","               0.009421480128632195,\n","               0.009251669817656866,\n","               0.00917362228161675,\n","               0.009128316700242929,\n","               0.009118413340696768,\n","               0.009081137617326972,\n","               0.009185342753140341,\n","               0.009195402191128601,\n","               0.009298372305254914,\n","               0.009272109175442855,\n","               0.009275913779467494,\n","               0.00949705711409944,\n","               0.00932726729724978,\n","               0.009365304537453052,\n","               0.009348571461583124,\n","               0.009275308253511916,\n","               0.00924509632655056,\n","               0.009396004181336924,\n","               0.009375802902328584,\n","               0.00936803184350707,\n","               0.009368561489099743,\n","               0.009393986469312127,\n","               0.00938202645808223,\n","               0.009440069647380499,\n","               0.009404748872319766,\n","               0.009341493675120218,\n","               0.009314265821581362,\n","               0.009299401101906498,\n","               0.009288785241487007,\n","               0.00932998345744973,\n","               0.009314783639784729,\n","               0.009252463090400431,\n","               0.00929458280663729,\n","               0.009301166886767293,\n","               0.009263713025032335,\n","               0.009427178932150613,\n","               0.009326097760414086,\n","               0.009350432991358858,\n","               0.009332955578398937,\n","               0.009314463800610531,\n","               0.009355584404402177,\n","               0.009377790544163982,\n","               0.009391505660305279,\n","               0.00944472982035381,\n","               0.009387223462237535,\n","               0.00940456708417447,\n","               0.009336844605769452,\n","               0.009337956789816464,\n","               0.00934906408311732,\n","               0.009364291638721317,\n","               0.00931496166982775,\n","               0.009323935647043168,\n","               0.009372333360814404,\n","               0.009378371796954341,\n","               0.009374401425494384,\n","               0.009426792355684582,\n","               0.009578030813598233,\n","               0.009639275614329746,\n","               0.009595673067434016,\n","               0.009654450774443315,\n","               0.009780800526584376,\n","               0.00987115406827367,\n","               0.009888251807985944,\n","               0.009852047325702447,\n","               0.009829203697977486,\n","               0.009857019638583753,\n","               0.009929916643746874,\n","               0.00990716773404369,\n","               0.009962503078302912,\n","               0.01009047527747592,\n","               0.010093858257641185,\n","               0.010057388418252594,\n","               0.010017278772677597,\n","               0.009978167601436012,\n","               0.009897833193030873,\n","               0.00981669273256672,\n","               0.00978479095739503,\n","               0.00978224696195136,\n","               0.009749905011698675,\n","               0.00969585472795406,\n","               0.00966665662405663,\n","               0.009828669508545287,\n","               0.009787008259138766,\n","               0.009783025474802585,\n","               0.009810319488685746,\n","               0.009785168298901123,\n","               0.009725623767864554,\n","               0.00984523850282066,\n","               0.00980927065338231,\n","               0.009859873352503292,\n","               0.009827119315700674,\n","               0.009891196155707056,\n","               0.009837782982412802,\n","               0.009882260677734317,\n","               0.009886729323909695,\n","               0.009816831818822466,\n","               0.009807863631923677,\n","               0.009893897534538195,\n","               0.009894469138326019,\n","               0.009869722302409926,\n","               0.009929269930742862,\n","               0.009891515467807204,\n","               0.00988343294264997,\n","               0.009935887609668804,\n","               0.009943261120068866,\n","               0.009912348735886804,\n","               0.009898018385373429,\n","               0.009946016120818357,\n","               0.009941330617468443,\n","               0.00998835833181066,\n","               0.009925514906534684,\n","               0.009912463920606282,\n","               0.009896283449716164,\n","               0.009831854161030561,\n","               0.009816842400584589,\n","               0.00977510081627294,\n","               0.00982788475014652,\n","               0.009676748244087197,\n","               0.009648088704601772,\n","               0.0096733723669863,\n","               0.009654073143271314,\n","               0.009683834227785168,\n","               0.009696520716742707,\n","               0.009713218384243591,\n","               0.009752219282646921,\n","               0.009809564932352256,\n","               0.009803418727124612,\n","               0.009254773389583732,\n","               0.009248296487587628,\n","               0.009251791473290314,\n","               0.009259584337075095,\n","               0.009257719709493269,\n","               0.009267944353571419,\n","               0.009312484720503927,\n","               0.009355304937650012,\n","               0.009419184629648596,\n","               0.009435446652834058,\n","               0.009426833322643213,\n","               0.009373929145769986,\n","               0.009412815467388754,\n","               0.009413142054316585,\n","               0.009337405363146995,\n","               0.009466084684305818,\n","               0.0094906763676728,\n","               0.009544615648889272,\n","               0.009563892481153457,\n","               0.009555203618752488,\n","               0.009485949452212494,\n","               0.009623328950704125,\n","               0.009624582194655763,\n","               0.00957574739794383,\n","               0.009665286783673453,\n","               0.009670803262276264,\n","               0.00974976056775887,\n","               0.009709358778606451,\n","               0.009741827468182782,\n","               0.00969368251106988,\n","               0.009699739545764304,\n","               0.009755275214840145,\n","               0.00977056902095727,\n","               0.009728169156884812,\n","               0.009654855545586236,\n","               0.009798601027157966,\n","               0.009775466433132774,\n","               0.0097869616058012,\n","               0.009787469265320327,\n","               0.009806087451623225,\n","               0.009799277285582305,\n","               0.009713186098800302,\n","               0.00970299633671316,\n","               0.009696889386528665,\n","               0.009497558461900804,\n","               0.009502671443175443,\n","               0.009364613370027376,\n","               0.009373470281511335,\n","               0.009337615765352228,\n","               0.00935318503968478,\n","               0.009441783114361339,\n","               0.009530689267848308,\n","               0.009542841228991218,\n","               0.009552050099305391,\n","               0.00956267273501412],\n","              'test-Logloss-mean': [0.6746804039569362,\n","               0.6589280612057559,\n","               0.6454368643284565,\n","               0.6311020394764905,\n","               0.6178819128580203,\n","               0.6056742290659183,\n","               0.5945533894691987,\n","               0.5838924911562932,\n","               0.5733194876464123,\n","               0.5640443718207014,\n","               0.5549918721687404,\n","               0.5464727506942637,\n","               0.538527405325329,\n","               0.5306204776637594,\n","               0.5237744193968182,\n","               0.5173907891642092,\n","               0.5119738327713915,\n","               0.5068268723450368,\n","               0.5018322811012838,\n","               0.49699180047312236,\n","               0.492213546913915,\n","               0.48749390016676836,\n","               0.4835234053036302,\n","               0.480086588748825,\n","               0.47638572034309984,\n","               0.47312180212462734,\n","               0.470019595231447,\n","               0.4672992043705843,\n","               0.46455959399958296,\n","               0.46213158745087995,\n","               0.45974073455521475,\n","               0.4568874550937911,\n","               0.4550348076351029,\n","               0.45310636685125544,\n","               0.4511938648195019,\n","               0.4496219686962137,\n","               0.4478960844119599,\n","               0.4466263341640806,\n","               0.44578731194591154,\n","               0.4442669992710761,\n","               0.44342950609959425,\n","               0.44240476107012133,\n","               0.4414096311393018,\n","               0.4407469633923289,\n","               0.43981585911258764,\n","               0.43870971804045017,\n","               0.43748519672270997,\n","               0.43685688731832867,\n","               0.4363416366166593,\n","               0.4356905322284441,\n","               0.4352972007244225,\n","               0.43452480718783554,\n","               0.4339496770022919,\n","               0.4332350398722327,\n","               0.43267441272061014,\n","               0.4320340144105567,\n","               0.4314138680038709,\n","               0.430950518329583,\n","               0.4304455843955064,\n","               0.4300611162583536,\n","               0.42945029846235533,\n","               0.42919025996428256,\n","               0.4287993237481267,\n","               0.4286103314667408,\n","               0.42832425986908373,\n","               0.42798494555773675,\n","               0.42771172300952043,\n","               0.42745212412602873,\n","               0.4271405147323466,\n","               0.4267389546086901,\n","               0.4265132346900231,\n","               0.42640606125219294,\n","               0.42601451237694876,\n","               0.4256341119502598,\n","               0.42537976698619867,\n","               0.4248685372443706,\n","               0.4247792577261836,\n","               0.42467487377864566,\n","               0.4245224139309545,\n","               0.42426396392921406,\n","               0.42413805535944443,\n","               0.4238389947949542,\n","               0.4236428052875194,\n","               0.42351687123302484,\n","               0.42348097601917734,\n","               0.423299787071537,\n","               0.4230200391531554,\n","               0.4228333451054101,\n","               0.4226918666774791,\n","               0.42259361322747874,\n","               0.4225780828107824,\n","               0.422494306125097,\n","               0.42241014223486834,\n","               0.42241823061257167,\n","               0.42233530423450016,\n","               0.42215285713272094,\n","               0.42202477166293567,\n","               0.4217970098944095,\n","               0.4217161983836544,\n","               0.4216474395308187,\n","               0.4215546362487972,\n","               0.4215002745392651,\n","               0.4214581387968102,\n","               0.42126782523325984,\n","               0.42105125215033756,\n","               0.4208524298326585,\n","               0.42081053839819366,\n","               0.42082557760432265,\n","               0.4207859724127155,\n","               0.42068010981575527,\n","               0.420546438776815,\n","               0.42047185768247236,\n","               0.4203545544506924,\n","               0.42022610293791685,\n","               0.42018778947362256,\n","               0.4201533245242219,\n","               0.4201450892862925,\n","               0.4200065732678447,\n","               0.41998516370866706,\n","               0.4198682663467652,\n","               0.41987788113258623,\n","               0.41984790983305276,\n","               0.4197796694408793,\n","               0.41966353282227775,\n","               0.4196759969749069,\n","               0.41968314508262705,\n","               0.4196585080966344,\n","               0.4196074887774795,\n","               0.4195069717039561,\n","               0.4195606355509402,\n","               0.41947859303230217,\n","               0.41944221899042183,\n","               0.4193303420689601,\n","               0.41925973309992265,\n","               0.4191754439198125,\n","               0.419036812733874,\n","               0.4190023195609565,\n","               0.41906639473453816,\n","               0.4190555656628032,\n","               0.41905027047836046,\n","               0.41905241247600483,\n","               0.4190075771853601,\n","               0.41895197505662446,\n","               0.41891747373611476,\n","               0.41892250317604773,\n","               0.41890380986926806,\n","               0.4189407171073723,\n","               0.4188949539361379,\n","               0.41887495035869193,\n","               0.4188660186456031,\n","               0.4188357520738102,\n","               0.4188382736432374,\n","               0.4187429431777425,\n","               0.41881380122195416,\n","               0.4186908722523925,\n","               0.4186786634259709,\n","               0.41863474885156243,\n","               0.4186103796058592,\n","               0.418542698380264,\n","               0.4185281415092282,\n","               0.4184642199050141,\n","               0.4184478849309408,\n","               0.4184393486573377,\n","               0.4183561104198241,\n","               0.41832046361721126,\n","               0.41827565360669,\n","               0.41829355782465577,\n","               0.4182666059422242,\n","               0.4181247308597067,\n","               0.4181292110044142,\n","               0.4181019182944559,\n","               0.4181044165227123,\n","               0.41801353233386235,\n","               0.41795870841074273,\n","               0.4179945770987877,\n","               0.417918102400527,\n","               0.41789423867500686,\n","               0.4177809806060158,\n","               0.41778591421322914,\n","               0.41781041642896954,\n","               0.41781731525269034,\n","               0.4178159109158628,\n","               0.41780250422472887,\n","               0.4177849986355248,\n","               0.4177926587704581,\n","               0.4177921187101558,\n","               0.41780554670480047,\n","               0.41769602754644236,\n","               0.4176627663888868,\n","               0.41788228112405584,\n","               0.41779774891279425,\n","               0.41785013235793533,\n","               0.41785557694267955,\n","               0.417886945034349,\n","               0.41787710997108524,\n","               0.41787295385096407,\n","               0.4178772680593821,\n","               0.41786296328800887,\n","               0.41782285582714396,\n","               0.4178226468543372,\n","               0.41779856148399347,\n","               0.4177672224404902,\n","               0.4177186638312232,\n","               0.417813586764892,\n","               0.41780155297271265,\n","               0.4178564178218284,\n","               0.417837029257851,\n","               0.4178947577076319,\n","               0.41798311264176496,\n","               0.41787993992888506,\n","               0.4178573526700964,\n","               0.41779167056574584,\n","               0.41779160646436436,\n","               0.4178050566386815,\n","               0.41782555427109364,\n","               0.4178704019490554,\n","               0.41782637553037655,\n","               0.4178113078871375,\n","               0.41776561543934804,\n","               0.41774742182837415,\n","               0.41775978745204484,\n","               0.4177017001911338,\n","               0.4177010565619154,\n","               0.4177294180804072,\n","               0.41771353329946215,\n","               0.41773106143297706,\n","               0.4177418801550344,\n","               0.4177245548355682,\n","               0.41774795925607444,\n","               0.4177050027686,\n","               0.4177017703848822,\n","               0.41772838053452294,\n","               0.41773177411418033,\n","               0.4177377074553492,\n","               0.41778842265682675,\n","               0.4178145868020979,\n","               0.4178306808104734,\n","               0.4178615088476512,\n","               0.4178544760117089,\n","               0.41786152838118623,\n","               0.4178395345485663,\n","               0.41784878626715277,\n","               0.4177823301837044,\n","               0.4177861187214649,\n","               0.4177938697092043,\n","               0.4185011109609693,\n","               0.41850656353748356,\n","               0.41850591289895017,\n","               0.4185193803065131,\n","               0.41857007631545345,\n","               0.41857533004163305,\n","               0.41864882282182125,\n","               0.41863831455013867,\n","               0.41867664100307134,\n","               0.4186595964583564,\n","               0.41863610327917783,\n","               0.41862198777152054,\n","               0.41860542016317326,\n","               0.4186606490435149,\n","               0.4187158024700485,\n","               0.41878106605585347,\n","               0.41878179159803053,\n","               0.41878104967812213,\n","               0.41884362648151746,\n","               0.4188544655527852,\n","               0.4189029627621763,\n","               0.41898743076888784,\n","               0.4190114036051542,\n","               0.4189017809627787,\n","               0.41897186449544005,\n","               0.4189781586541314,\n","               0.41915652520189783,\n","               0.41910264431708016,\n","               0.4190964003469046,\n","               0.41908004180121533,\n","               0.4190377554777102,\n","               0.4189843965118878,\n","               0.4189183116681243,\n","               0.418938896756292,\n","               0.4189779861790355,\n","               0.4189810216200545,\n","               0.4189388657540724,\n","               0.4189611713217405,\n","               0.4188962166998933,\n","               0.4188922250390951,\n","               0.41884021235316277,\n","               0.41878798275266815,\n","               0.41879561542794447,\n","               0.4187883378572718,\n","               0.41878568612128547,\n","               0.4188653929473684,\n","               0.4188175070502142,\n","               0.41879921917970764,\n","               0.4187428675447448,\n","               0.41875708522398486,\n","               0.4187085612741966,\n","               0.41865200449181245,\n","               0.4186359883350141,\n","               0.418602054363111,\n","               0.41855129635797983],\n","              'test-Logloss-std': [7.271721742457124e-05,\n","               0.0009132797519537435,\n","               0.0015491828791622817,\n","               0.0037608278595270164,\n","               0.00465279159524559,\n","               0.006476216308373954,\n","               0.007999872884800219,\n","               0.009505871248371047,\n","               0.010065701700860097,\n","               0.009758223610558893,\n","               0.009165543286652091,\n","               0.009154156581161765,\n","               0.009805002693336262,\n","               0.009437777471831091,\n","               0.00870641745661851,\n","               0.009184812664557347,\n","               0.008906879861230222,\n","               0.00896787718613373,\n","               0.009586148554551577,\n","               0.009332069146511432,\n","               0.00922574317304049,\n","               0.008890394756221961,\n","               0.009299527013435479,\n","               0.008845129895458582,\n","               0.008587899081216313,\n","               0.008151749721393953,\n","               0.007927748377797937,\n","               0.0074485109863984995,\n","               0.007657296247246294,\n","               0.00751428604429133,\n","               0.007274899127721897,\n","               0.007433308362320479,\n","               0.007343234386794748,\n","               0.0071897134630189655,\n","               0.007093359918053899,\n","               0.007337299925558817,\n","               0.007305047251894156,\n","               0.007339033387279019,\n","               0.00736968358642777,\n","               0.007213419788386228,\n","               0.0073792291600297275,\n","               0.007180045306774271,\n","               0.007362845854249682,\n","               0.007272184296771014,\n","               0.006997761903832292,\n","               0.006867817722464427,\n","               0.007015681301644688,\n","               0.006932104467221576,\n","               0.0069251690483769805,\n","               0.006980175286830996,\n","               0.006907599699609738,\n","               0.007164635398072485,\n","               0.00713226430574309,\n","               0.00728773893334182,\n","               0.007461159261700236,\n","               0.007446838133498646,\n","               0.007574707642431319,\n","               0.007780404796272828,\n","               0.00800283919475077,\n","               0.007916913819973333,\n","               0.008248798541282588,\n","               0.008431533560242658,\n","               0.008373306746401436,\n","               0.008493667155021286,\n","               0.008627295472891696,\n","               0.008752480730314972,\n","               0.008769926310049324,\n","               0.008880873109480962,\n","               0.008996462700355503,\n","               0.009202999608817921,\n","               0.009407721620096145,\n","               0.009441365727602983,\n","               0.009572199606544167,\n","               0.009690789021109973,\n","               0.009625507578401004,\n","               0.009803544532440265,\n","               0.00972965440172007,\n","               0.009708001417818626,\n","               0.00972789179275964,\n","               0.00962994353693426,\n","               0.009729171777379959,\n","               0.009746644228138254,\n","               0.009836997403019656,\n","               0.009939899864906279,\n","               0.010039970400555293,\n","               0.010106168262927652,\n","               0.0102306328981521,\n","               0.010286496234922555,\n","               0.010340124443525688,\n","               0.010260052243094835,\n","               0.010272193021643403,\n","               0.010295339303343996,\n","               0.010285462688830233,\n","               0.010314350108758861,\n","               0.010465027528576224,\n","               0.010593126106311647,\n","               0.01047370832867748,\n","               0.010470354543619852,\n","               0.010542881978370576,\n","               0.010615815925160504,\n","               0.010577518502880558,\n","               0.010574426209126037,\n","               0.01053967760306916,\n","               0.010553859973171556,\n","               0.010702513512029112,\n","               0.010759840764733776,\n","               0.010748846802901417,\n","               0.010747795482100085,\n","               0.010869065939429396,\n","               0.010836545330032438,\n","               0.010775850788343042,\n","               0.010709477213881921,\n","               0.01056786746367197,\n","               0.010411352717311004,\n","               0.010352215232769591,\n","               0.010409482217735789,\n","               0.010430843826750087,\n","               0.010556331707385277,\n","               0.010373177124985755,\n","               0.010258331503287773,\n","               0.010230644411093089,\n","               0.010265612295550506,\n","               0.010257041186518063,\n","               0.010222558002218064,\n","               0.010277432854023303,\n","               0.010261209259745847,\n","               0.010328861339239097,\n","               0.010381785281510052,\n","               0.010437545270217261,\n","               0.010606148248526638,\n","               0.010482313863229877,\n","               0.010509433365127932,\n","               0.010524464500132589,\n","               0.010522194354000591,\n","               0.010557165538689598,\n","               0.01065921220054009,\n","               0.010665029753760604,\n","               0.010719475070686824,\n","               0.01072971814467467,\n","               0.010739984007307704,\n","               0.01076107501696442,\n","               0.010829732180202391,\n","               0.010817732002235708,\n","               0.010772324808222735,\n","               0.010767475951943382,\n","               0.010780923086930688,\n","               0.010771009947267075,\n","               0.01082719523684929,\n","               0.010838692002669303,\n","               0.010815777730983005,\n","               0.010902387044674427,\n","               0.010942652239967597,\n","               0.010962526793542248,\n","               0.011134301195827097,\n","               0.011097051842270247,\n","               0.011109478490101044,\n","               0.01107107867286564,\n","               0.01111406860679131,\n","               0.011207710737919653,\n","               0.01121816003309632,\n","               0.011283950468479237,\n","               0.011397435142373978,\n","               0.011415917348205004,\n","               0.011452018463531189,\n","               0.011423881557338346,\n","               0.011407229970369472,\n","               0.011443452884659143,\n","               0.011439421263091483,\n","               0.01152096212791212,\n","               0.011527875131998868,\n","               0.011535310092505248,\n","               0.011558591624632268,\n","               0.011561831275851097,\n","               0.01161758827307494,\n","               0.011725517488214213,\n","               0.011795129783810919,\n","               0.011753918741930741,\n","               0.011849285845491532,\n","               0.011988735114248765,\n","               0.012114801797184514,\n","               0.012132063495243218,\n","               0.01210428353464838,\n","               0.01215727641413601,\n","               0.012198818894348255,\n","               0.012270156848306594,\n","               0.012248776298027559,\n","               0.01229306939296272,\n","               0.012419126010411896,\n","               0.012472055618324986,\n","               0.012435309259525823,\n","               0.012401643500872302,\n","               0.012412033265649207,\n","               0.012378494009006086,\n","               0.012303638684526334,\n","               0.01228697369369378,\n","               0.012288717572213642,\n","               0.01228219115872494,\n","               0.012257626096937436,\n","               0.01226072433896291,\n","               0.012372059402325272,\n","               0.01235925345262408,\n","               0.012341191130456891,\n","               0.012354060656414607,\n","               0.012304007084121814,\n","               0.012257905447550512,\n","               0.012358930091812485,\n","               0.01236050363721419,\n","               0.012461088765436822,\n","               0.012405909740915906,\n","               0.012519724769301323,\n","               0.01249366078216777,\n","               0.012555340523876489,\n","               0.012557075457260126,\n","               0.012442924056970386,\n","               0.012528957248254972,\n","               0.012571094368395631,\n","               0.012589755707394484,\n","               0.0125783449257254,\n","               0.012632041423856485,\n","               0.012587547146629652,\n","               0.01256715991051299,\n","               0.012612234482178207,\n","               0.012613537858725913,\n","               0.012610640941396063,\n","               0.012632151808500183,\n","               0.01263734762496722,\n","               0.012656417553742237,\n","               0.012714079055496767,\n","               0.012659222926783044,\n","               0.012641518155080245,\n","               0.01265938528406619,\n","               0.012612939804677651,\n","               0.012608887918834709,\n","               0.012592512017449781,\n","               0.012711767901566131,\n","               0.012594467170887287,\n","               0.012602463714589564,\n","               0.012627205516550619,\n","               0.012608302953302593,\n","               0.012621116231571652,\n","               0.012643564560346546,\n","               0.012645450615770036,\n","               0.012696659002696158,\n","               0.012732385362360503,\n","               0.012761639281087592,\n","               0.012187719973861297,\n","               0.01218587883255854,\n","               0.012242279535444508,\n","               0.012229273957841612,\n","               0.012265338605232073,\n","               0.012294682403780231,\n","               0.012482401206210667,\n","               0.01257295464836872,\n","               0.012627040880345036,\n","               0.012644437933887498,\n","               0.012634936395470754,\n","               0.012561930039280134,\n","               0.01261013117868687,\n","               0.012643791929675444,\n","               0.012587933134102083,\n","               0.012781964284568985,\n","               0.012827923147336301,\n","               0.012870621166827394,\n","               0.012967103572820052,\n","               0.012967574349491591,\n","               0.012907177272843197,\n","               0.013121060657236859,\n","               0.013131331000223304,\n","               0.013121780238297718,\n","               0.013193872397304098,\n","               0.01319173729513368,\n","               0.013359598865169449,\n","               0.013333118706121196,\n","               0.013376970820880161,\n","               0.01333336370114665,\n","               0.01339050935620753,\n","               0.013394054402634362,\n","               0.01340751667084295,\n","               0.013406929083564403,\n","               0.01336423516394235,\n","               0.013610077711815011,\n","               0.013592343069394249,\n","               0.013589068088743578,\n","               0.01361789010485436,\n","               0.013630491672052072,\n","               0.013574713559994366,\n","               0.013483302955533648,\n","               0.013469403941571891,\n","               0.01346399825602655,\n","               0.013276134910572713,\n","               0.013263719048441936,\n","               0.013072584613657954,\n","               0.013084249224893943,\n","               0.013078717717158852,\n","               0.013098803251003587,\n","               0.013160201230148135,\n","               0.013280344762447594,\n","               0.013260991943490903,\n","               0.013262021390247505,\n","               0.01324011356969918],\n","              'train-Logloss-mean': [0.6739953580311697,\n","               0.6581484165859705,\n","               0.6443564064417305,\n","               0.6297930680046637,\n","               0.6164007107215949,\n","               0.6038392812901913,\n","               0.5923585559158355,\n","               0.5813756384576307,\n","               0.5704284301160377,\n","               0.5605080513254668,\n","               0.5513370578269883,\n","               0.5423322527452052,\n","               0.5340963152134727,\n","               0.5254425612514141,\n","               0.5183954735698935,\n","               0.5117161734870582,\n","               0.5060195884683643,\n","               0.5004350644753757,\n","               0.4949948644930687,\n","               0.4894241028766364,\n","               0.4842255008500042,\n","               0.47923013911073714,\n","               0.4747854352955942,\n","               0.4710762728122034,\n","               0.46712484601491305,\n","               0.4634986390684144,\n","               0.4602712572792112,\n","               0.4572957839853402,\n","               0.4544550888508973,\n","               0.45201300018989327,\n","               0.449538755755466,\n","               0.4463550391341293,\n","               0.44439414589927656,\n","               0.4420402994898176,\n","               0.4399337811542448,\n","               0.43783748107988024,\n","               0.4360928399151592,\n","               0.4345170048744957,\n","               0.43300234519837383,\n","               0.43125964292644553,\n","               0.4301861680812989,\n","               0.4287661572314166,\n","               0.4274232233373849,\n","               0.42660658259791334,\n","               0.425286881355387,\n","               0.4239361805331254,\n","               0.42244951697632144,\n","               0.4216061042903212,\n","               0.42101984754239435,\n","               0.4202238673440535,\n","               0.41937031150104653,\n","               0.4181869393812003,\n","               0.41717281451038674,\n","               0.4161183116043759,\n","               0.41551956153946845,\n","               0.4146898764620513,\n","               0.41387627819639655,\n","               0.4126841678165957,\n","               0.4118409103113454,\n","               0.4113923493786098,\n","               0.4107008667439427,\n","               0.4103597187716219,\n","               0.40942242690459557,\n","               0.40870669503253115,\n","               0.40800015287708574,\n","               0.40732648718664927,\n","               0.40691218869396534,\n","               0.40637526668676643,\n","               0.4059793181453804,\n","               0.40520023153158174,\n","               0.40484855212053894,\n","               0.40436848750456655,\n","               0.40368708032114414,\n","               0.40309140667211657,\n","               0.40258232273967526,\n","               0.40174862507293746,\n","               0.40123105164888656,\n","               0.4008715450579818,\n","               0.4004905425106471,\n","               0.4001773623280376,\n","               0.3998150855412493,\n","               0.3990399230212705,\n","               0.39836206354957976,\n","               0.3981365145380496,\n","               0.39762706569232426,\n","               0.3974279853378218,\n","               0.3970396391382418,\n","               0.39675898203507615,\n","               0.3963541650467944,\n","               0.3958591414371935,\n","               0.3955011278093891,\n","               0.3952120509642931,\n","               0.39495692112275077,\n","               0.39461687884257923,\n","               0.39405526956962267,\n","               0.39368991315300406,\n","               0.39324230316260267,\n","               0.3924924558214071,\n","               0.39188611530247924,\n","               0.39163205617775415,\n","               0.39129947268960935,\n","               0.39113643660050174,\n","               0.39098724886226854,\n","               0.3905309570588574,\n","               0.39013247765525905,\n","               0.3897464989551178,\n","               0.38934770207532593,\n","               0.38909990245843096,\n","               0.3886816828265787,\n","               0.38845087152841073,\n","               0.3881751386831995,\n","               0.38806927200765057,\n","               0.38788756062760976,\n","               0.3875384844238369,\n","               0.387235277725318,\n","               0.3869868175024926,\n","               0.3867343922165573,\n","               0.38659329796760894,\n","               0.3861666870401422,\n","               0.38582038794848533,\n","               0.3855752694415406,\n","               0.3853195635491629,\n","               0.3850354456618807,\n","               0.3847388207904788,\n","               0.38434934758743095,\n","               0.38393407850721745,\n","               0.3836170335014358,\n","               0.3833710582973074,\n","               0.3829201360978603,\n","               0.38275522697159303,\n","               0.38248898202530973,\n","               0.3822455709918479,\n","               0.3820305804693624,\n","               0.3814488801652573,\n","               0.3811687501901391,\n","               0.3808779718127852,\n","               0.38075370616566456,\n","               0.38055496123016425,\n","               0.38049021845272885,\n","               0.380135647703477,\n","               0.3800279645160114,\n","               0.3798679289770626,\n","               0.3796333171778355,\n","               0.3793771284760084,\n","               0.37908743054139604,\n","               0.37894502557028287,\n","               0.37879699222187974,\n","               0.3786561845177803,\n","               0.3785760506230064,\n","               0.3783778145948687,\n","               0.37812607659885406,\n","               0.3778980298159698,\n","               0.37769986683715606,\n","               0.377205729506563,\n","               0.37689213728060916,\n","               0.3768412850586102,\n","               0.37669892527286725,\n","               0.37637972404879544,\n","               0.3760815301526201,\n","               0.3758965325847244,\n","               0.37573225127864057,\n","               0.37529448469016374,\n","               0.3751430963484174,\n","               0.37474343707181806,\n","               0.3744186874201145,\n","               0.3742614949319889,\n","               0.37414923622068336,\n","               0.37402866497074877,\n","               0.37376781960646815,\n","               0.3736948039814667,\n","               0.3734666539944369,\n","               0.37339998042981754,\n","               0.37311689884861204,\n","               0.3728725540763529,\n","               0.37258901139612594,\n","               0.3724577853126874,\n","               0.3723939917248038,\n","               0.3721735710702818,\n","               0.37192606975626635,\n","               0.3716691289154393,\n","               0.37143078635248433,\n","               0.3713448759703499,\n","               0.3712002181167758,\n","               0.3711315918563503,\n","               0.3709271972545423,\n","               0.3708895096729196,\n","               0.3707401217509891,\n","               0.37041722802730065,\n","               0.37013977853660673,\n","               0.3698561602448049,\n","               0.36965302508626013,\n","               0.3693102817135465,\n","               0.3690141394103034,\n","               0.3685449059960568,\n","               0.3684054244747548,\n","               0.3682659847725403,\n","               0.36823117066981803,\n","               0.36802482325473834,\n","               0.3677458703612823,\n","               0.36761162968511485,\n","               0.36748015253753863,\n","               0.3670503137408884,\n","               0.3668998754663156,\n","               0.36680855015303976,\n","               0.3667376630220988,\n","               0.36640912153266597,\n","               0.36623613255356124,\n","               0.3661115291971566,\n","               0.3658938713416366,\n","               0.3656451025098158,\n","               0.36560697355300875,\n","               0.36537176443163916,\n","               0.3652213083494142,\n","               0.3651227445781616,\n","               0.36482705726854037,\n","               0.3645240110061388,\n","               0.3642883337497249,\n","               0.3641649669720643,\n","               0.36398131098675096,\n","               0.3637550538550547,\n","               0.363640657981247,\n","               0.36339604185794516,\n","               0.3633836803739296,\n","               0.3632094270904706,\n","               0.3628498227133036,\n","               0.3627090243716305,\n","               0.36252899753563345,\n","               0.3624781499921957,\n","               0.3621043294035206,\n","               0.3618279962158375,\n","               0.36161764099503935,\n","               0.36143617520686444,\n","               0.3613554566162009,\n","               0.36112836173600554,\n","               0.3609522751643784,\n","               0.36072779768242574,\n","               0.3604974260275125,\n","               0.36034711049442364,\n","               0.3602291177245611,\n","               0.3601226216273689,\n","               0.3597246558311961,\n","               0.3596085019329573,\n","               0.3594696635878994,\n","               0.35927693561268387,\n","               0.35913340839808733,\n","               0.35875224856842686,\n","               0.3586906999680896,\n","               0.35849128727533525,\n","               0.3582718595587672,\n","               0.3579878133694477,\n","               0.3578540940360193,\n","               0.35763605684278993,\n","               0.3574074613305702,\n","               0.3572850254031721,\n","               0.35714943890209083,\n","               0.35703486951636093,\n","               0.3567960453577721,\n","               0.35658496948932084,\n","               0.35642854525622764,\n","               0.35612824031567536,\n","               0.35574082435204973,\n","               0.3555675220002675,\n","               0.3553300623176985,\n","               0.35501389839956193,\n","               0.3549032712393143,\n","               0.35464781889867,\n","               0.3543074198841476,\n","               0.3539415378811384,\n","               0.353528717097708,\n","               0.3531678078007821,\n","               0.35307057348917265,\n","               0.35267478604297353,\n","               0.3523113032318476,\n","               0.35193160365423415,\n","               0.351697306397569,\n","               0.35152296369987024,\n","               0.3512432523198781,\n","               0.3510878463786704,\n","               0.35074592115538633,\n","               0.3505339262564335,\n","               0.3501754039475639,\n","               0.34993665231576476,\n","               0.34970424811434536,\n","               0.3495226433469529,\n","               0.34934930297071437,\n","               0.3491208460972963,\n","               0.3488963133729818,\n","               0.3486392356656141,\n","               0.3484421922486896,\n","               0.348061151432468,\n","               0.3477887498114883,\n","               0.34747873427956444,\n","               0.34739429279216094,\n","               0.34719331152571065,\n","               0.3470227694766736,\n","               0.34686766705277816,\n","               0.3465642383457519,\n","               0.3462720487237374,\n","               0.34614260003130504,\n","               0.34580884858795696],\n","              'train-Logloss-std': [0.000585800807549178,\n","               0.0004270374092565656,\n","               0.0007795708158201733,\n","               0.0035551373556719367,\n","               0.004695064103112806,\n","               0.005942719596467969,\n","               0.007461258864027159,\n","               0.008730453010259787,\n","               0.009343077957108035,\n","               0.008591725383560454,\n","               0.007497142597830866,\n","               0.0075306377480341,\n","               0.008097908270931127,\n","               0.008607545162359235,\n","               0.007997428316328738,\n","               0.0079554219658559,\n","               0.007953294447662842,\n","               0.00808001157695256,\n","               0.008199912258559407,\n","               0.008105063736654887,\n","               0.007688171284059704,\n","               0.007333290107132236,\n","               0.007167981460213357,\n","               0.006489709201775109,\n","               0.006399019019337026,\n","               0.006205368356308581,\n","               0.006132772589543722,\n","               0.006386071909684988,\n","               0.006923334355353631,\n","               0.0067652319108980116,\n","               0.006619377726614803,\n","               0.005991303941450016,\n","               0.005641423362431422,\n","               0.0053485082756195255,\n","               0.0054252536957541345,\n","               0.005552016044309063,\n","               0.005573364293324409,\n","               0.005688325937559298,\n","               0.005741699971198502,\n","               0.005434489630444424,\n","               0.0055684386838927,\n","               0.00522968390343088,\n","               0.00556670973387518,\n","               0.005691672474258921,\n","               0.005832586850749706,\n","               0.006098309663934069,\n","               0.00591888633238027,\n","               0.005877784793650581,\n","               0.00608669456732427,\n","               0.006409109831292107,\n","               0.006383358438758387,\n","               0.006474097014471991,\n","               0.006764009827380426,\n","               0.006645269753993244,\n","               0.0066728870435477155,\n","               0.006565448619242631,\n","               0.006467200945923841,\n","               0.006547309201461105,\n","               0.006172201889232206,\n","               0.006340533294455802,\n","               0.00577776929983983,\n","               0.005749188119783063,\n","               0.005870664381839312,\n","               0.005860302975117369,\n","               0.00583187634125278,\n","               0.005895107620508152,\n","               0.005892495346073582,\n","               0.006091351520328838,\n","               0.005909597365972752,\n","               0.005605184474635153,\n","               0.00536004820234337,\n","               0.005359173102788203,\n","               0.005207874197175267,\n","               0.005033298422142405,\n","               0.0051436915134516915,\n","               0.005291569084658867,\n","               0.005040462134417995,\n","               0.005055450616867109,\n","               0.0052595091547794175,\n","               0.0054183117666461705,\n","               0.005093174056536425,\n","               0.005229107268015272,\n","               0.004949158687757131,\n","               0.004918797547417281,\n","               0.004926778132014188,\n","               0.004792207325097809,\n","               0.004774409532885762,\n","               0.004579094387322286,\n","               0.004773159997098362,\n","               0.005079452335574874,\n","               0.004751230973919286,\n","               0.004832655168744275,\n","               0.00465321190071942,\n","               0.004382345269837177,\n","               0.004243056961402439,\n","               0.00417352285636574,\n","               0.004266453049205401,\n","               0.003987252525762935,\n","               0.004190799863184332,\n","               0.004117254815076476,\n","               0.004312786323931754,\n","               0.004297952324362447,\n","               0.004387770536475875,\n","               0.0044023637782189965,\n","               0.0040928640419568025,\n","               0.00423860738555287,\n","               0.004179279131616755,\n","               0.004115953746355616,\n","               0.004486951317020764,\n","               0.004698964109921557,\n","               0.00468253715758553,\n","               0.00467479650864986,\n","               0.004703557120181815,\n","               0.004952093266747874,\n","               0.005131257160812453,\n","               0.005158592752790171,\n","               0.005002223590420946,\n","               0.004851215605374458,\n","               0.0048108614366023685,\n","               0.004968468798340624,\n","               0.004904828167014551,\n","               0.004736174426585829,\n","               0.004683192751862989,\n","               0.004596338763296114,\n","               0.004638729857024601,\n","               0.004760242132754302,\n","               0.004715576354074537,\n","               0.004709563237574859,\n","               0.004502741674130685,\n","               0.004739713157399678,\n","               0.005090934483813155,\n","               0.005105881803976153,\n","               0.005147066249642934,\n","               0.004874915599556599,\n","               0.004882195747114271,\n","               0.004810853154776093,\n","               0.0048593168032342125,\n","               0.004943040444336158,\n","               0.0048777297603498785,\n","               0.004858917501249331,\n","               0.004916425613217753,\n","               0.0047654332891443095,\n","               0.0046668957323304965,\n","               0.004766459906516145,\n","               0.0045717937722802825,\n","               0.004498864745884811,\n","               0.0043846474935419506,\n","               0.0043967599471739505,\n","               0.004366733683469366,\n","               0.004456287098376013,\n","               0.004390267879321655,\n","               0.004572907374759983,\n","               0.004500201541954514,\n","               0.004712430259321827,\n","               0.004970482486418734,\n","               0.004959372937451724,\n","               0.004966989894624375,\n","               0.005258665144694744,\n","               0.005118771150480118,\n","               0.0050834823648731675,\n","               0.004994472276882917,\n","               0.0051041719007475774,\n","               0.005096584225472399,\n","               0.005039904188099528,\n","               0.004878747316434958,\n","               0.004909517102168425,\n","               0.004956826595130043,\n","               0.0050684133647341595,\n","               0.005073447442896611,\n","               0.005133326878381855,\n","               0.0049709688231756085,\n","               0.005042418156644165,\n","               0.005051519992946463,\n","               0.004790467373224913,\n","               0.0048626368409769236,\n","               0.004754592750808651,\n","               0.004858413894418212,\n","               0.00466812336607798,\n","               0.00486540853175979,\n","               0.0048927719979687595,\n","               0.004803528570684285,\n","               0.004735475619532612,\n","               0.0046964474183969675,\n","               0.00468713617190553,\n","               0.004723670360195358,\n","               0.004772279285280081,\n","               0.00485870055691458,\n","               0.0048233441821913725,\n","               0.004753844290566439,\n","               0.004808309804740519,\n","               0.004876205789489548,\n","               0.005017076429892671,\n","               0.0049906759544944505,\n","               0.005065733999831307,\n","               0.004949884414230085,\n","               0.004817474025594637,\n","               0.004815239379538306,\n","               0.004933871645616336,\n","               0.0048395121263922515,\n","               0.0049647392366040256,\n","               0.0049232530240180825,\n","               0.004976332918393556,\n","               0.004865594257674273,\n","               0.004857672581362238,\n","               0.0048041858287386965,\n","               0.005173199783622689,\n","               0.005171621880565656,\n","               0.005377871444958199,\n","               0.005529858929785795,\n","               0.0054050630812109,\n","               0.00541858859750249,\n","               0.005272879851724022,\n","               0.005139245105430286,\n","               0.005201367915683799,\n","               0.005196176382600195,\n","               0.005454943584709487,\n","               0.005403034625583319,\n","               0.005409968994289036,\n","               0.0054217809103921195,\n","               0.005412337163908704,\n","               0.0052998401639785175,\n","               0.005080017322649053,\n","               0.005069501706458751,\n","               0.0051160082640781075,\n","               0.005221921984237733,\n","               0.005140654669569709,\n","               0.005331544115228798,\n","               0.005378138216110852,\n","               0.005131178276242879,\n","               0.0052598196391519456,\n","               0.005086631820868412,\n","               0.005030266001448972,\n","               0.0050203130415945926,\n","               0.00507551714549988,\n","               0.005143764057675128,\n","               0.005225183035527492,\n","               0.005207889857057593,\n","               0.0051649409022699894,\n","               0.005216160449900893,\n","               0.005312018837778816,\n","               0.0049655806107186135,\n","               0.004979362749288071,\n","               0.004873516297629433,\n","               0.004853710429257092,\n","               0.004862494433301875,\n","               0.004742333075065512,\n","               0.004683673655705059,\n","               0.004894059872384837,\n","               0.004833169772122183,\n","               0.004943075985570299,\n","               0.004926695520846182,\n","               0.005041996308868021,\n","               0.0050085850918869254,\n","               0.005147231296145418,\n","               0.005081096111362919,\n","               0.0050944590071586,\n","               0.005254031079881716,\n","               0.005271231266196241,\n","               0.005253063139604128,\n","               0.005363161588130036,\n","               0.005696846735423693,\n","               0.005888108567075192,\n","               0.005918167093629707,\n","               0.005886047041555614,\n","               0.005836686673959781,\n","               0.005907450601579782,\n","               0.006182071944186981,\n","               0.005996102016092631,\n","               0.005991678058040785,\n","               0.006185672361083804,\n","               0.006078155344562305,\n","               0.006024972559674197,\n","               0.0059941792119282316,\n","               0.006030309604452403,\n","               0.005930226125723048,\n","               0.005997852855665655,\n","               0.005984384005257462,\n","               0.0059548572694530805,\n","               0.0061044295047877955,\n","               0.006201323662343242,\n","               0.005979294356043866,\n","               0.0060021732497446585,\n","               0.006023255563965738,\n","               0.005988123368056369,\n","               0.006025157570655982,\n","               0.006050259042758647,\n","               0.0061750001433657905,\n","               0.006243659751026527,\n","               0.006213545592182279,\n","               0.006345069413885299,\n","               0.006258929788132133,\n","               0.006270601460241208,\n","               0.006246373330515044,\n","               0.006271356832772912,\n","               0.006295391500488181,\n","               0.006406500369315556,\n","               0.006278727890240235,\n","               0.006414217695678697,\n","               0.006449282655722765,\n","               0.006439855175116963]})}"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["boosting_model.get_all_params()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a2ANrR6od7Eq","executionInfo":{"status":"ok","timestamp":1665822022640,"user_tz":-180,"elapsed":47,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"5761a704-7377-4929-f5da-88b21cbad8c1"},"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'nan_mode': 'Min',\n"," 'eval_metric': 'AUC',\n"," 'combinations_ctr': ['Borders:CtrBorderCount=15:CtrBorderType=Uniform:TargetBorderCount=1:TargetBorderType=MinEntropy:Prior=0/1:Prior=0.5/1:Prior=1/1',\n","  'Counter:CtrBorderCount=15:CtrBorderType=Uniform:Prior=0/1'],\n"," 'iterations': 300,\n"," 'sampling_frequency': 'PerTree',\n"," 'fold_permutation_block': 0,\n"," 'leaf_estimation_method': 'Newton',\n"," 'counter_calc_method': 'SkipTest',\n"," 'grow_policy': 'SymmetricTree',\n"," 'penalties_coefficient': 1,\n"," 'boosting_type': 'Plain',\n"," 'model_shrink_mode': 'Constant',\n"," 'feature_border_type': 'GreedyLogSum',\n"," 'ctr_leaf_count_limit': 18446744073709551615,\n"," 'bayesian_matrix_reg': 0.10000000149011612,\n"," 'one_hot_max_size': 2,\n"," 'eval_fraction': 0,\n"," 'force_unit_auto_pair_weights': False,\n"," 'l2_leaf_reg': 0.21052631735801697,\n"," 'random_strength': 1,\n"," 'rsm': 1,\n"," 'boost_from_average': False,\n"," 'max_ctr_complexity': 4,\n"," 'model_size_reg': 0.5,\n"," 'simple_ctr': ['Borders:CtrBorderCount=15:CtrBorderType=Uniform:TargetBorderCount=1:TargetBorderType=MinEntropy:Prior=0/1:Prior=0.5/1:Prior=1/1',\n","  'Counter:CtrBorderCount=15:CtrBorderType=Uniform:Prior=0/1'],\n"," 'pool_metainfo_options': {'tags': {}},\n"," 'subsample': 0.800000011920929,\n"," 'use_best_model': False,\n"," 'class_names': [0, 1],\n"," 'random_seed': 0,\n"," 'depth': 6,\n"," 'ctr_target_border_count': 1,\n"," 'posterior_sampling': False,\n"," 'has_time': False,\n"," 'store_all_simple_ctr': False,\n"," 'border_count': 254,\n"," 'classes_count': 0,\n"," 'auto_class_weights': 'None',\n"," 'sparse_features_conflict_fraction': 0,\n"," 'leaf_estimation_backtracking': 'AnyImprovement',\n"," 'best_model_min_trees': 1,\n"," 'model_shrink_rate': 0,\n"," 'min_data_in_leaf': 1,\n"," 'loss_function': 'Logloss',\n"," 'learning_rate': 0.029999999329447743,\n"," 'score_function': 'Cosine',\n"," 'task_type': 'CPU',\n"," 'leaf_estimation_iterations': 10,\n"," 'bootstrap_type': 'MVS',\n"," 'max_leaves': 64,\n"," 'permutation_count': 4}"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":["y_pred = boosting_model.predict_proba(X_test)[:, 1]\n","roc_auc_score(y_test, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-UFk3BD0bYB7","executionInfo":{"status":"ok","timestamp":1665822022641,"user_tz":-180,"elapsed":43,"user":{"displayName":"Tagir","userId":"17764597530162846028"}},"outputId":"cc130dd6-b36e-4a89-d02f-890939099386"},"execution_count":78,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8695280564845783"]},"metadata":{},"execution_count":78}]},{"cell_type":"markdown","source":["По логгированию видно, что рост качества как раз прекращается к 300 итерациям и что получилось качество выше чем при 500 итерациях. "],"metadata":{"id":"WbNuk7n6u0JR"}},{"cell_type":"markdown","metadata":{"id":"rf4Kjt96EEZU"},"source":["Лучшее качество: почти 0.87 . Подробно параметры есть выше, lr примерно 0.03, 300 итераций."]},{"cell_type":"markdown","metadata":{"id":"d2d9GolXEEZV"},"source":[]},{"cell_type":"markdown","metadata":{"id":"dDMXbvNZEEZV"},"source":["# Предсказания"]},{"cell_type":"code","metadata":{"id":"G_P4wFNaEEZW","executionInfo":{"status":"ok","timestamp":1665822440192,"user_tz":-180,"elapsed":9,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"source":["best_model = boosting_model"],"execution_count":84,"outputs":[]},{"cell_type":"code","metadata":{"id":"FfSufx0CEEZZ","executionInfo":{"status":"ok","timestamp":1665823216656,"user_tz":-180,"elapsed":614,"user":{"displayName":"Tagir","userId":"17764597530162846028"}}},"source":["X_test = pd.read_csv('./test.csv')\n","submission = pd.read_csv('./submission.csv')\n","\n","submission['Churn'] = best_model.predict_proba(X_test)[:,1]\n","submission.to_csv('./my_submission.csv', index = False)"],"execution_count":93,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mkxjbGkVEEZc"},"source":["# Kaggle (5 баллов)\n","\n","Как выставить баллы:\n","\n","1) 1 >= roc auc > 0.84 это 5 баллов\n","\n","2) 0.84 >= roc auc > 0.7 это 3 балла\n","\n","3) 0.7 >= roc auc > 0.6 это 1 балл\n","\n","4) 0.6 >= roc auc это 0 баллов\n","\n","\n","Для выполнения задания необходимо выполнить следующие шаги.\n","* Зарегистрироваться на платформе [kaggle.com](kaggle.com). Процесс выставления оценок будет проходить при подведении итогового рейтинга. Пожалуйста, укажите во вкладке Team -> Team name свои имя и фамилию в формате Имя_Фамилия (важно, чтобы имя и фамилия совпадали с данными на Stepik).\n","* Обучить модель, получить файл с ответами в формате .csv и сдать его в конкурс. Пробуйте и экспериментируйте. Обратите внимание, что вы можете выполнять до 20 попыток сдачи на kaggle в день.\n","* После окончания соревнования отправить в итоговый ноутбук с решением на степик. \n","* После дедлайна проверьте посылки других участников по критериям. Для этого надо зайти на степик, скачать их ноутбук и проверить скор в соревновании."]},{"cell_type":"markdown","source":["Скор на kaggle: 0.85176          \n","Ник на kaggle: Тагир Казимагамедов    \n","Ссылка на лк: https://www.kaggle.com/tl1ter"],"metadata":{"id":"lYcmPqoy0QKJ"}}]}